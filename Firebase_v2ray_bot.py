# -*- coding: utf-8 -*-

"""
FreeV2ray Telegram Bot - Firebase Edition (Multi-Language + Support)

This bot manages V2ray subscriptions, referrals (coins), and provides support.
It uses Firebase Firestore as a persistent database.
It requires a 'serviceAccountKey.json' file in the same directory.
"""

import logging
import asyncio
import re
from datetime import datetime

# Firebase Admin SDK
import firebase_admin
from firebase_admin import credentials, firestore

# Telegram Bot Library (python-telegram-bot v20+)
# --- (FIXED) 'Message' import ‡∂ë‡∂ö ‡∂∏‡∑ô‡∂≠‡∑ê‡∂±‡∂ß ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì ---
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot, Message
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)
# --- (FIXED) ParseMode import ‡∂ë‡∂ö ‡∂∏‡∑ô‡∂≠‡∑ê‡∂±‡∂ß ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì ---
from telegram.constants import ParseMode
# --------------------------------------------------


# --- Bot Settings (‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∑ô‡∂∫ ‡∑É‡∂ö‡∑É‡∂±‡∑ä‡∂±) ---
BOT_TOKEN = "7015662481:AAGYK7Buir3TIezH38jpeeQ4mvQydY7tI_g"
OWNER_ID = 6687619682
MAIN_CHANNEL_ID = -1003209750658
MAIN_CHANNEL_USERNAME = "@freev2rayx" # @ ‡∂Ø‡∑è‡∂±‡∑ä‡∂± (e.g., @mychannel)
CHANNEL_INVITE_LINK = "https://t.me/freev2rayx" # Invite link (public or private)

# Referral Settings
COINS_PER_REFERRAL = 20
MIN_REFERRALS_FOR_PREMIUM = 5 # (‡∂Ø‡∑ê‡∂±‡∑ä ‡∂∏‡∑ô‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂±‡∑ú‡∑Ä‡∑ö, ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂Ö‡∂±‡∑è‡∂ú‡∂≠‡∂∫‡∂ß ‡∂≠‡πÑ‡∏ß‡πâ)

# Broadcast Settings
BROADCAST_BATCH_SIZE = 25  # ‡∂ë‡∂ö ‡∑É‡∑ê‡∂ª‡∑ö‡∂ö‡∂ß ‡∂∫‡∑Ä‡∂± ‡∂ú‡∂´‡∂±
BROADCAST_SLEEP_TIME = 1   # batch ‡∂Ö‡∂≠‡∂ª ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª ‡∂ú‡∂´‡∂±

# --- Firebase Setup ---
try:
    cred = credentials.Certificate("serviceAccountKey.json")
    firebase_admin.initialize_app(cred)
    db = firestore.client()
    logging.info("Firebase Firestore ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑í‡∂∫.")
except FileNotFoundError:
    logging.error("!!! 'serviceAccountKey.json' file ‡∂ë‡∂ö ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫! !!!")
    logging.error("‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª key file ‡∂ë‡∂ö, bot script ‡∂ë‡∂ö ‡∂á‡∂≠‡∑í folder ‡∂ë‡∂ö‡∑ö‡∂∏ ‡∂≠‡∂∂‡∂±‡∑ä‡∂±.")
    exit()
except ValueError as e:
    if "Could not deserialize key data" in str(e):
        logging.error("!!! 'serviceAccountKey.json' file ‡∂ë‡∂ö‡∑ö ‡∂Ö‡∂±‡∑ä‡∂≠‡∂ª‡∑ä‡∂ú‡∂≠‡∂∫ ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í! (Invalid JSON) !!!")
        logging.error("‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª Firebase ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä key file ‡∂ë‡∂ö‡∂ö‡∑ä download ‡∂ö‡∂ª paste ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
        exit()
    else:
        logging.error(f"Firebase ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
        exit()
except Exception as e:
    logging.error(f"Firebase ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂±‡∑ú‡∂Ø‡∂±‡∑ä‡∂±‡∑è ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
    exit()

# Firestore Collections References
users_ref = db.collection("users")
admin_ref = db.collection("admin_settings")

# Conversation States (Support Feature ‡∑É‡∂≥‡∑Ñ‡∑è)
TYPING_SUPPORT_MESSAGE = 1

# --- Bot ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂© (‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∑É‡∑Ñ English) ---
STRINGS = {
    'welcome': {
        'en': "üëã Welcome! Please select your language:",
        'si': "üëã ‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä! ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂î‡∂∂‡∂ú‡∑ö ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:",
    },
    'force_join': {
        'en': (
            "You must join our main channel to use this bot.\n\n"
            f"Please join: {MAIN_CHANNEL_USERNAME}\n\n"
            "After joining, press the '‚úÖ Joined' button."
        ),
        'si': (
            "‡∂∏‡∑ô‡∂∏ bot ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß, ‡∂î‡∂∂ ‡∂Ö‡∂¥‡∂ú‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂±‡∑è‡∂Ω‡∑í‡∂ö‡∑è‡∑Ä‡∂ß (channel) ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.\n\n"
            f"‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∂±‡∑ä‡∂±: {MAIN_CHANNEL_USERNAME}\n\n"
            "‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ñ ‡∂¥‡∑É‡∑î, '‚úÖ ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑î‡∂±‡∑è' ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏ ‡∂î‡∂∂‡∂±‡∑ä‡∂±."
        ),
    },
    'joined_button': {
        'en': "‚úÖ Joined",
        'si': "‚úÖ ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑î‡∂±‡∑è",
    },
    'checking_button': {
        'en': "Checking...",
        'si': "‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä...",
    },
    'force_register': {
        'en': "Thanks for joining! üôè\n\nNow, you need to register to get your referral link and access the bot.\n\nPlease use the command: `/register`",
        'si': "‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏ ‡∂ú‡∑ê‡∂± ‡∑É‡∑ä‡∂≠‡∑ñ‡∂≠‡∑í‡∂∫‡∑í! üôè\n\n‡∂Ø‡∑ê‡∂±‡∑ä, bot ‡∑Ä‡∑ô‡∂≠ ‡∂¥‡∑í‡∑Ä‡∑í‡∑É‡∑ì‡∂∏‡∂ß ‡∑É‡∑Ñ ‡∂î‡∂∂‡∂ú‡∑ö referral link ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂î‡∂∂ ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.\n\n‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±: `/register`",
    },
    'bot_menu_title': {
        'en': "‚úÖ Welcome to the Bot Menu!\n\nHow can I help you?",
        'si': "‚úÖ Bot Menu ‡∑Ä‡∑ô‡∂≠ ‡∑É‡∑è‡∂Ø‡∂ª‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂ú‡∂±‡∑í‡∂∏‡∑î!\n\n‡∂∏‡∂∏ ‡∂î‡∂∂‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö ‡∂ö‡∑ô‡∑É‡∑ö‡∂Ø?",
    },
    'register_success': {
        'en': "‚úÖ You are successfully registered!\n\nUse the buttons below to navigate.",
        'si': "‚úÖ ‡∂î‡∂∂ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑í‡∂∫!",
    },
    'already_registered': {
        'en': "You are already registered. Use the menu buttons to navigate.",
        'si': "‡∂î‡∂∂ ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑ì ‡∂á‡∂≠. ‡∂∏‡∑ô‡∂±‡∑î ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
    },
    'my_account': {
        'en': "üë§ **My Account**\n\n- **Your Coins:** `{coins}` ü™ô\n- **Total Referrals:** `{refs}` üôã‚Äç‚ôÇÔ∏è\n\n**Your Referral Link:**\n`{ref_link}`",
        'si': "üë§ **‡∂∏‡∂ú‡∑ö ‡∂ú‡∑í‡∂´‡∑î‡∂∏**\n\n- **‡∂î‡∂∂‡∑ö ‡∂ö‡∑è‡∑É‡∑í (Coins):** `{coins}` ü™ô\n- **‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∂∫‡∑ú‡∂∏‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä (Referrals):** `{refs}` üôã‚Äç‚ôÇÔ∏è\n\n**‡∂î‡∂∂‡∂ú‡∑ö Referral Link ‡∂ë‡∂ö:**\n`{ref_link}`",
    },
    'shop_title': {
        'en': "üõçÔ∏è **Premium V2Ray Shop**\n\nUse your coins to buy a package. Buying a package will alert the admin to create your service.\n\nYour Coins: `{coins}` ü™ô",
        'si': "üõçÔ∏è **Premium V2Ray ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∑É‡∑ê‡∂Ω**\n\nPackage ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∏‡∑í‡∂Ω‡∂Ø‡∑ì ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ö‡∑è‡∑É‡∑í (coins) ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. ‡∂î‡∂∂ ‡∂∏‡∑í‡∂Ω‡∂Ø‡∑ì ‡∂ú‡∂≠‡∑ä ‡∑Ä‡∑í‡∂ß, admin ‡∑Ñ‡∂ß service ‡∂ë‡∂ö ‡∑É‡∑ë‡∂Ø‡∑ì‡∂∏‡∂ß ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä ‡∂Ø‡∑ì‡∂∏‡∂ö‡∑ä ‡∂∫‡∂∫‡∑í.\n\n‡∂î‡∂∂‡∑ö ‡∂ö‡∑è‡∑É‡∑í: `{coins}` ü™ô",
    },
    'not_enough_coins': {
        'en': "‚ùå **Purchase Failed**\n\nSorry, you don't have enough coins for this package.\n\n- Your Coins: `{coins}` ü™ô\n- Package Cost: `{cost}` ü™ô",
        'si': "‚ùå **‡∂∏‡∑í‡∂Ω‡∂Ø‡∑ì ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í**\n\n‡∂ö‡∂´‡∂ú‡∑è‡∂ß‡∑î‡∂∫‡∑í, ‡∂∏‡∑ô‡∂∏ package ‡∂ë‡∂ö ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂î‡∂∂‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑è‡∑É‡∑í ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠.\n\n- ‡∂î‡∂∂‡∑ö ‡∂ö‡∑è‡∑É‡∑í: `{coins}` ü™ô\n- Package ‡∂∏‡∑í‡∂Ω: `{cost}` ü™ô",
    },
    'purchase_success': {
        'en': "‚úÖ **Purchase Successful!**\n\n`{cost}` coins have been deducted from your account.\n\nThe admin has been notified. Please wait patiently, your service will be created soon.",
        'si': "‚úÖ **‡∂∏‡∑í‡∂Ω‡∂Ø‡∑ì ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í!**\n\n‡∂î‡∂∂‡∂ú‡∑ö ‡∂ú‡∑í‡∂´‡∑î‡∂∏‡∑ô‡∂±‡∑ä ‡∂ö‡∑è‡∑É‡∑í `{cost}` ‡∂ö‡∑ä ‡∂Ö‡∂©‡∑î ‡∂ö‡∂ª ‡∂á‡∂≠.\n\nAdmin ‡∑Ä‡∑ô‡∂≠ ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä ‡∂Ø‡∑ì ‡∂á‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±, ‡∂î‡∂∂‡∂ú‡∑ö service ‡∂ë‡∂ö ‡∂â‡∂ö‡∑ä‡∂∏‡∂±‡∑í‡∂±‡∑ä ‡∑É‡∑è‡∂Ø‡∂±‡∑î ‡∂á‡∂≠.",
    },
    'purchase_alert_to_admin': {
        'en': (
            "üîî **New Purchase Alert!** üîî\n\n"
            "**User:** {mention} (ID: `{user_id}`)\n"
            "**Package:** {package_name}\n"
            "**Cost:** {cost} Coins\n\n"
            "Please create the service for this user."
        ),
        'si': (
            "üîî **‡∂±‡∑Ä ‡∂∏‡∑í‡∂Ω‡∂Ø‡∑ì ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ö‡∑ä!** üîî\n\n"
            "**User:** {mention} (ID: `{user_id}`)\n"
            "**Package:** {package_name}\n"
            "**‡∂∏‡∑í‡∂Ω:** {cost} ‡∂ö‡∑è‡∑É‡∑í\n\n"
            "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∑ô‡∂∏ user ‡∑Ñ‡∂ß service ‡∂ë‡∂ö ‡∑É‡∑è‡∂Ø‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±."
        ),
    },
    'get_free_v2ray_no_post': {
        'en': "Sorry, the admin hasn't set up a free V2Ray post yet. Please check back later.",
        'si': "‡∂ö‡∂´‡∂ú‡∑è‡∂ß‡∑î‡∂∫‡∑í, admin ‡∂≠‡∑Ä‡∂∏‡∂≠‡∑ä ‡∂±‡∑ú‡∂∏‡∑í‡∂Ω‡∑ö V2Ray post ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑É‡∂ö‡∑É‡∑è ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
    },
    'get_free_v2ray_follow_up': {
        'en': (
            "That was a free server!\n\n"
            "Tired of slow, crowded free servers? Get your own **Premium V2Ray** server!\n\n"
            "‚úÖ High Speed\n"
            "‚úÖ 99% Uptime\n"
            "‚úÖ Low Ping\n\n"
            "Click /shop to see packages or /myaccount to check your coins!"
        ),
        'si': (
            "‡∂ë‡∂∫ ‡∂±‡∑ú‡∂∏‡∑í‡∂Ω‡∑ö ‡∂Ø‡∑ô‡∂± ‡∂Ω‡∂Ø server ‡∂ë‡∂ö‡∂ö‡∑í!\n\n"
            "‡∂∏‡∂±‡∑ä‡∂Ø‡∂ú‡∑è‡∂∏‡∑ì, ‡∑É‡∑ô‡∂±‡∂ü ‡∂¥‡∑í‡∂ª‡∑î‡∂´‡∑î free server ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∑Ä‡∑ô‡∑Ñ‡∑ô‡∑É‡∂ß ‡∂¥‡∂≠‡∑ä‡∑Ä ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑Ä‡∑è‡∂Ø? ‡∂î‡∂∂‡∂ú‡∑ö‡∂∏ **Premium V2Ray** server ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ä‡∂±!\n\n"
            "‚úÖ ‡∂Ö‡∂∞‡∑í‡∂ö ‡∑Ä‡∑ö‡∂ú‡∂∫\n"
            "‚úÖ 99% Uptime\n"
            "‚úÖ ‡∂Ö‡∂©‡∑î Ping ‡∂Ö‡∂ú‡∂∫\n\n"
            "Package ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏‡∂ß /shop click ‡∂ö‡∂ª‡∂±‡∑ä‡∂±, ‡∂±‡∑ê‡∂≠‡∑Ñ‡∑ú‡∂≠‡∑ä ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ö‡∑è‡∑É‡∑í (coins) ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏‡∂ß /myaccount click ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!"
        ),
    },
    'above_is_free': {
        'en': "‚¨ÜÔ∏è Here is your free server!",
        'si': "‚¨ÜÔ∏è ‡∂î‡∂∂‡∂ú‡∑ö ‡∂±‡∑ú‡∂∏‡∑í‡∂Ω‡∑ö server ‡∂ë‡∂ö ‡∂â‡∑Ñ‡∂≠ ‡∂á‡∂≠!",
    },
    'support_start': {
        'en': "üì® **Support System**\n\nPlease type your question or problem now. The admin will receive your message and your User ID.\n\nType /cancel to abort.",
        'si': "üì® **‡∑É‡∑Ñ‡∑è‡∂∫ ‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í‡∂∫ (Support)**\n\n‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∑Ñ‡∑ù ‡∂ú‡∑ê‡∂ß‡∂Ω‡∑î‡∑Ä ‡∂Ø‡∑ê‡∂±‡∑ä type ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. Admin ‡∑Ñ‡∂ß ‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∑É‡∑Ñ ‡∂î‡∂∂‡∂ú‡∑ö User ID ‡∂ë‡∂ö ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂±‡∑î ‡∂á‡∂≠.\n\n‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß /cancel ‡∂Ω‡∑ô‡∑É type ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
    },
    'support_message_sent': {
        'en': "‚úÖ Your message has been sent to the admin. They will reply as soon as possible.",
        'si': "‚úÖ ‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ admin ‡∑Ä‡∑ô‡∂≠ ‡∂∫‡∑Ä‡∂± ‡∂Ω‡∂Ø‡∑ì. ‡∂î‡∑Ä‡∑î‡∂±‡∑ä ‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂â‡∂ö‡∑ä‡∂∏‡∂±‡∑í‡∂±‡∑ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑î ‡∂á‡∂≠.",
    },
    'support_forward_to_admin': {
        'en': "üì® Support ticket from {mention} (ID: `{user_id}`):\n\n--- MESSAGE ---",
        'si': "üì® {mention} (ID: `{user_id}`) ‡∂ú‡∑ô‡∂±‡∑ä support ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä:\n\n--- MESSAGE ---",
    },
    'support_reply_admin_prompt': {
        'en': "To reply, use:\n`/reply {user_id} Your message here`",
        'si': "‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ì‡∂∏‡∂ß, ‡∂∏‡∑ô‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±:\n`/reply {user_id} ‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫`",
    },
    'support_reply_success_admin': {
        'en': "‚úÖ Reply sent to User ID `{user_id}`.",
        'si': "‚úÖ User ID `{user_id}` ‡∑Ä‡∑ô‡∂≠ ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂∫‡∑Ä‡∂± ‡∂Ω‡∂Ø‡∑ì.",
    },
    'support_reply_fail_admin': {
        'en': "‚ùå Failed to send reply. The user might have blocked the bot. Error: {error}",
        'si': "‚ùå ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫. User ‡∑É‡∂∏‡∑Ñ‡∂ª‡∑Ä‡∑í‡∂ß bot ‡∑Ä block ‡∂ö‡∂ª ‡∂á‡∂≠. ‡∂Ø‡∑ù‡∑Ç‡∂∫: {error}",
    },
    'support_reply_received_user': {
        'en': "üì® **Reply from Admin:**\n\n`{message}`",
        'si': "üì® **Admin ‡∂ú‡∑ô‡∂±‡∑ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∂ö‡∑ä:**\n\n`{message}`",
    },
    'support_cancel': {
        'en': "Support request cancelled.",
        'si': "Support ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏ ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.",
    },
    'shop_button': {
        'en': "Shop",
        'si': "‡∑Ä‡∑ô‡∑Ö‡∂≥‡∑É‡∑ê‡∂Ω",
    },
    'free_button': {
        'en': "Free V2Ray",
        'si': "‡∂±‡∑ú‡∂∏‡∑í‡∂Ω‡∑ö V2Ray",
    },
    'account_button': {
        'en': "My Account",
        'si': "‡∂∏‡∂ú‡∑ö ‡∂ú‡∑í‡∂´‡∑î‡∂∏",
    },
    'support_button': {
        'en': "Support",
        'si': "‡∑É‡∑Ñ‡∑è‡∂∫",
    },
    'back_button': {
        'en': "‚¨ÖÔ∏è Back",
        'si': "‚¨ÖÔ∏è ‡∂Ü‡∂¥‡∑É‡∑î",
    },
}

# --- Premium Shop Packages ---
# 'callback_data': (Display Name, Price in Coins)
SHOP_PACKAGES = {
    "buy_30d_50g": ("30 Day - 50GB", 100),
    "buy_30d_100g": ("30 Day - 100GB", 200),
    "buy_30d_unlim": ("30 Day - Unlimited GB", 300),
    "buy_50d_50g": ("50 Day - 50GB", 200),
    "buy_50d_100g": ("50 Day - 100GB", 300),
    "buy_50d_unlim": ("50 Day - Unlimited GB", 400),
}


# --- Logging Setup ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# PTB library ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂ë‡∂± ‡∂Ö‡∂±‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ log ‡∂Ö‡∂©‡∑î ‡∂ö‡∂ª‡∂∫‡∑í
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


# === Utility Functions (‡∂ã‡∂¥‡∂ö‡∑è‡∂ª‡∂ö Functions) ===

async def get_user_data(user_id):
    """Firestore ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä user ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì."""
    doc_ref = users_ref.document(str(user_id))
    try:
        doc = await asyncio.to_thread(doc_ref.get)
        if doc.exists:
            return doc.to_dict()
    except Exception as e:
        logger.error(f"Firestore get_user_data (User: {user_id}) ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
        # Firestore ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä (e.g., key error)
        # ‡∂∏‡∑ô‡∑Ñ‡∑í‡∂Ø‡∑ì bot ‡∂ë‡∂ö crash ‡∑Ä‡∑ì‡∂∏ ‡∑Ä‡∑ê‡∑Ö‡∑ê‡∂ö‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß ‡∑Ñ‡∑í‡∑É‡∑ä data return ‡∂ö‡∂ª‡∂∫‡∑í
    
    # Default user data (‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä user or error)
    return {
        'id': user_id,
        'is_registered': False,
        'referral_count': 0,
        'coins': 0,
        'referred_by': None,
        'language': 'en' # Default ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä English
    }

async def update_user_data(user_id, data):
    """Firestore ‡∂ë‡∂ö‡∑ö user ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∂ª‡∂∫‡∑í."""
    try:
        doc_ref = users_ref.document(str(user_id))
        await asyncio.to_thread(doc_ref.set, data, merge=True)
    except Exception as e:
        logger.error(f"Firestore update_user_data (User: {user_id}) ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")

async def get_admin_settings():
    """Firestore ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä admin settings ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì."""
    try:
        doc_ref = admin_ref.document("settings")
        doc = await asyncio.to_thread(doc_ref.get)
        if doc.exists:
            return doc.to_dict()
    except Exception as e:
        logger.error(f"Firestore get_admin_settings ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
        
    return {'free_v2ray_post_id': None}

async def update_admin_settings(data):
    """Firestore ‡∂ë‡∂ö‡∑ö admin settings ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∂ª‡∂∫‡∑í."""
    try:
        doc_ref = admin_ref.document("settings")
        await asyncio.to_thread(doc_ref.set, data, merge=True)
    except Exception as e:
        logger.error(f"Firestore update_admin_settings ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")

async def check_channel_membership(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """User, channel ‡∂ë‡∂ö‡∑ö ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑ô‡∂ö‡∑ä‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∫‡∑í."""
    try:
        member = await context.bot.get_chat_member(chat_id=MAIN_CHANNEL_ID, user_id=user_id)
        if member.status in ["member", "administrator", "creator"]:
            return True
        else:
            return False
    except Exception as e:
        logger.error(f"Channel membership ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä (ID: {user_id}): {e}")
        # Bot ‡∂ë‡∂ö channel ‡∂ë‡∂ö‡∑ö admin ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ‡∑Ñ‡∑ù ID ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂±‡∂∏‡∑ä, error ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ë‡∂∫‡∑í.
        return False # ‡∂Ü‡∂ª‡∂ö‡∑ä‚Äç‡∑Ç‡∑í‡∂≠‡∂∏ ‡∂Ø‡∑ö False return ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂∫‡∑í

def get_string(key: str, lang: str):
    """‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö‡∑Ä ‡∂±‡∑í‡∂∫‡∂∏‡∑í‡∂≠ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂∫‡∑í."""
    try:
        return STRINGS[key][lang]
    except KeyError:
        # ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í ‡∂±‡∂∏‡∑ä default English ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í
        try:
            return STRINGS[key]['en']
        except KeyError:
            logger.error(f"STRING ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫! Key: {key}")
            return f"MISSING_STRING_FOR_{key}"

def user_mention(user):
    """Markdown ‡∑Ä‡∂Ω‡∂Ø‡∑ì user ‡∑Ä mention ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß short-hand ‡∂ë‡∂ö‡∂ö‡∑ä."""
    if user.username:
        return f"@{user.username}"
    else:
        # MarkdownV2 ‡∑Ä‡∂Ω‡∂Ø‡∑ì ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç ‡∂Ö‡∂ö‡∑ä‡∑Ç‡∂ª escape ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫
        name = re.sub(r'([\[\]\(\)~`>#\+\-=|{}\.!])', r'\\\1', user.first_name)
        return f"[{name}](tg://user?id={user.id})"

# === User Check Decorator ===
# (‡∂∏‡∑ô‡∂∫ /shop, /free, /myaccount ‡∑Ä‡∑ê‡∂±‡∑í commands ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∑ô‡∂ª run ‡∑Ä‡∑ö)

from functools import wraps

def user_checks(func):
    """
    Decorator ‡∂ë‡∂ö‡∂ö‡∑ä. User, channel ‡∂ë‡∂ö‡∑ö ‡∑É‡∑Ñ register ‡∑Ä‡∑ì ‡∂á‡∂≠‡∑ä‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∫‡∑í.
    ‡∂±‡∑ê‡∂≠‡∑Ñ‡∑ú‡∂≠‡∑ä, ‡∂Ö‡∂Ø‡∑è‡∑Ö "force" ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂∫‡∑Ä‡∂∫‡∑í.
    """
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        # as_callback=True ‡∂Ω‡∑ô‡∑É ‡∂Ü‡∑Ä‡∑ú‡∂≠‡∑ä, update ‡∂ë‡∂ö query ‡∂ë‡∂ö‡∂ö‡∑ä
        message = update.message or update.callback_query.message
        user = update.effective_user
        
        user_data = await get_user_data(user.id)
        lang = user_data.get('language', 'en') # User ‡∂ú‡∑ö ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì

        # 1. Channel Member Check
        is_member = await check_channel_membership(user.id, context)
        if not is_member:
            keyboard = [[InlineKeyboardButton(f"üîó {MAIN_CHANNEL_USERNAME}", url=CHANNEL_INVITE_LINK)],
                        [InlineKeyboardButton(f"‚úÖ {get_string('joined_button', lang)}", callback_data="check_join_menu")]]
            await message.reply_text(
                get_string('force_join', lang),
                reply_markup=InlineKeyboardMarkup(keyboard),
                disable_web_page_preview=True
            )
            if update.callback_query:
                await update.callback_query.answer() # Button ‡∂ë‡∂ö‡∂ß loading ‡∂Ö‡∂∫‡∑í‡∂±‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í
            return

        # 2. Registration Check
        if not user_data.get('is_registered', False):
            await message.reply_text(get_string('force_register', lang))
            if update.callback_query:
                await update.callback_query.answer() # Button ‡∂ë‡∂ö‡∂ß loading ‡∂Ö‡∂∫‡∑í‡∂±‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í
            return

        # Checks Pass
        # User, channel ‡∂ë‡∂ö‡∑ö ‡∑É‡∑Ñ register ‡∑Ä‡∑ì ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä, ‡∂Ö‡∂Ø‡∑è‡∑Ö command ‡∂ë‡∂ö (func) run ‡∂ö‡∂ª‡∂∫‡∑í
        
        # kwargs ‡∑Ñ‡∂ª‡∑Ñ‡∑è user_data ‡∑É‡∑Ñ lang pass ‡∂ö‡∂ª‡∂∫‡∑í
        kwargs['user_data'] = user_data
        kwargs['lang'] = lang
        
        # update object ‡∂ë‡∂ö callback query ‡∂ë‡∂ö‡∂ö‡∑ä‡∂Ø command ‡∂ë‡∂ö‡∂ö‡∑ä‡∂Ø ‡∂∫‡∂±‡∑ä‡∂± ‡∂Ö‡∂±‡∑î‡∑Ä func ‡∂ë‡∂ö call ‡∂ö‡∂ª‡∂∫‡∑í
        if update.callback_query:
             # Callback query ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∂∏‡∑ä, update object ‡∂ë‡∂ö ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´‡∂∫‡∑ô‡∂±‡∑ä‡∂∏ ‡∂∫‡∑Ä‡∂∫‡∑í
            return await func(update, context, *args, **kwargs)
        else:
            # Command ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∂∏‡∑ä, update object ‡∂ë‡∂ö ‡∂∫‡∑Ä‡∂∫‡∑í
            return await func(update, context, *args, **kwargs)

    return wrapped


# === Bot Command Handlers ===

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Bot ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑‡∂ö command ‡∂ë‡∂ö. Referral logic ‡∑É‡∑Ñ language select."""
    user = update.effective_user
    user_data = await get_user_data(user.id)
    args = context.args

    # --- Language Selection (‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏) ---
    # User register ‡∑Ä‡∑ì ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ‡∑Ñ‡∑ù language ‡∂ë‡∂ö‡∂ö‡∑ä set ‡∂ö‡∂ª ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä
    if not user_data.get('is_registered', False) or not user_data.get('language'):
        # Referral Logic (‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ô‡∂ª‡∂∏ referral save ‡∂ö‡∂ª ‡∂ú‡∂±‡∑ì)
        # User ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä ‡∑É‡∑Ñ referral link ‡∂ë‡∂ö‡∂ö‡∑í‡∂±‡∑ä ‡∂¥‡∑ê‡∂∏‡∑í‡∂´‡∑í‡∂∫‡∑ö ‡∂±‡∂∏‡∑ä
        if not user_data.get('referred_by') and args and args[0].isdigit():
            referrer_id = int(args[0])
            if referrer_id != user.id:
                user_data['referred_by'] = referrer_id
                await update_user_data(user.id, user_data)
                logger.info(f"User {user.id} was referred by {referrer_id} (pending registration)")

        # Language selection buttons
        keyboard = [
            [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")],
            [InlineKeyboardButton("üá±üá∞ ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω", callback_data="lang_si")],
        ]
        await update.message.reply_text(
            f"{get_string('welcome', 'en')}\n\n{get_string('welcome', 'si')}", # ‡∂∑‡∑è‡∑Ç‡∑è ‡∂Ø‡∑ô‡∂ö‡∑ô‡∂±‡∑ä‡∂∏ ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # --- User ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä register ‡∑Ä‡∑ì, ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∑è ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ---
    lang = user_data['language']
    is_member = await check_channel_membership(user.id, context)

    if not is_member:
        keyboard = [[InlineKeyboardButton(f"üîó {MAIN_CHANNEL_USERNAME}", url=CHANNEL_INVITE_LINK)],
                    [InlineKeyboardButton(f"‚úÖ {get_string('joined_button', lang)}", callback_data="check_join_menu")]]
        await update.message.reply_text(
            get_string('force_join', lang),
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    else:
        # User is member and registered, show bot menu
        await show_bot_menu(update, context, lang)


async def language_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Language selection button ‡∂ë‡∂ö handle ‡∂ö‡∂ª‡∂∫‡∑í."""
    query = update.callback_query
    # --- (FIXED) effective_user ‡∑Ä‡∑ô‡∂±‡∑î‡∑Ä‡∂ß from_user ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ---
    user = query.from_user 
    # ----------------------------------------------------
    await query.answer()
    
    lang_code = query.data.split("_")[1] # "lang_en" -> "en"
    
    user_data = await get_user_data(user.id)
    user_data['language'] = lang_code
    await update_user_data(user.id, user_data)
    
    logger.info(f"User {user.id} selected language: {lang_code}")

    # ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂≠‡∑ö‡∂ª‡∑ñ ‡∂¥‡∑É‡∑î, channel check ‡∂ë‡∂ö run ‡∂ö‡∂ª‡∂∫‡∑í
    is_member = await check_channel_membership(user.id, context)
    
    if not is_member:
        keyboard = [[InlineKeyboardButton(f"üîó {MAIN_CHANNEL_USERNAME}", url=CHANNEL_INVITE_LINK)],
                    [InlineKeyboardButton(f"‚úÖ {get_string('joined_button', lang_code)}", callback_data="check_join_menu")]]
        await query.edit_message_text(
            get_string('force_join', lang_code),
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
    else:
        # Channel ‡∂ë‡∂ö‡∑ö ‡∑É‡∑í‡∂ß‡∑ì ‡∂±‡∂∏‡∑ä, register ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í
        await query.edit_message_text(get_string('force_register', lang_code))


async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """User ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö command ‡∂ë‡∂ö."""
    user = update.effective_user
    user_data = await get_user_data(user.id)
    lang = user_data.get('language', 'en')

    # 1. Channel Member Check
    is_member = await check_channel_membership(user.id, context)
    if not is_member:
        keyboard = [[InlineKeyboardButton(f"üîó {MAIN_CHANNEL_USERNAME}", url=CHANNEL_INVITE_LINK)],
                    [InlineKeyboardButton(f"‚úÖ {get_string('joined_button', lang)}", callback_data="check_join_register")]]
        await update.message.reply_text(
            get_string('force_join', lang),
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )
        return
    
    # 2. Already Registered Check
    if user_data.get('is_registered', False):
        await update.message.reply_text(get_string('already_registered', lang))
        await show_bot_menu(update, context, lang)
        return

    # --- New Registration Process ---
    user_data['is_registered'] = True
    user_data['username'] = user.username or user.first_name
    
    # Referral Coin Logic
    referrer_id = user_data.get('referred_by')
    if referrer_id:
        # Referrer (‡∑Ñ‡∂≥‡∑î‡∂±‡∑ä‡∑Ä‡∑è ‡∂Ø‡∑î‡∂±‡∑ä user) ‡∂ú‡∑ö ‡∂Ø‡∂≠‡∑ä‡∂≠ update ‡∂ö‡∂ª‡∂∫‡∑í
        referrer_data = await get_user_data(referrer_id)
        # Referrer ‡∂Ø register ‡∑Ä‡∑ì ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä coins ‡∂Ø‡∑ô‡∂∫‡∑í
        if referrer_data.get('is_registered', False):
            referrer_data['referral_count'] = referrer_data.get('referral_count', 0) + 1
            referrer_data['coins'] = referrer_data.get('coins', 0) + COINS_PER_REFERRAL
            await update_user_data(referrer_id, referrer_data)
            
            logger.info(f"User {referrer_id} received {COINS_PER_REFERRAL} coins for referring {user.id}")
            
            # Referrer ‡∂ß ‡∂Ø‡∂±‡∑ä‡∑Ä‡∂∫‡∑í (Optional)
            try:
                ref_lang = referrer_data.get('language', 'en')
                await context.bot.send_message(
                    chat_id=referrer_id,
                    text=f"Congrats! A user you referred ({user_mention(user)}) has joined. You received {COINS_PER_REFERRAL} coins! ü™ô"
                         if ref_lang == 'en' else
                         f"‡∑É‡∑î‡∂∂ ‡∂¥‡∑ê‡∂≠‡∑î‡∂∏‡∑ä! ‡∂î‡∂∂ ‡∑Ñ‡∂≥‡∑î‡∂±‡∑ä‡∑Ä‡∑è ‡∂Ø‡∑î‡∂±‡∑ä user ({user_mention(user)}) ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑í‡∂∫. ‡∂î‡∂∂‡∂ß ‡∂ö‡∑è‡∑É‡∑í {COINS_PER_REFERRAL} ‡∂ö‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑è! ü™ô",
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            except Exception as e:
                logger.warning(f"Referrer {referrer_id} ‡∂ß ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {e}")
        else:
            logger.info(f"Referrer {referrer_id} is not registered. Holding referral for {user.id}.")
            # (Note: Referrer register ‡∑Ä‡∑ñ ‡∑Ä‡∑í‡∂ß ‡∂∏‡∑ô‡∂∏ coin ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±‡∂ß logic ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä, ‡∂ë‡∂∫ ‡∑É‡∂Ç‡∂ö‡∑ì‡∂ª‡∑ä‡∂´‡∂∫‡∑í)

    await update_user_data(user.id, user_data)
    logger.info(f"New user registered: {user.id} ({user_data['username']})")

    await update.message.reply_text(get_string('register_success', lang))
    await show_bot_menu(update, context, lang)


async def check_join_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """'‚úÖ Joined' button ‡∂ë‡∂ö handle ‡∂ö‡∂ª‡∂∫‡∑í."""
    query = update.callback_query
    # --- (FIXED) effective_user ‡∑Ä‡∑ô‡∂±‡∑î‡∑Ä‡∂ß from_user ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ---
    user = query.from_user
    # ----------------------------------------------------
    
    user_data = await get_user_data(user.id)
    lang = user_data.get('language', 'en')

    await query.answer(f"{get_string('checking_button', lang)}", show_alert=False)
    is_member = await check_channel_membership(user.id, context)

    if is_member:
        await query.answer("‚úÖ Thank you for joining!")
        callback_action = query.data # "check_join_menu" or "check_join_register"
        
        if callback_action == "check_join_register" or not user_data.get('is_registered', False):
            # Register command ‡∂ë‡∂ö run ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß user ‡∑Ä ‡∂∫‡∑ú‡∂∏‡∑î ‡∂ö‡∂ª‡∂∫‡∑í
            await query.edit_message_text(get_string('force_register', lang))
        else:
            # Bot menu ‡∂ë‡∂ö ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í
            await show_bot_menu(update, context, lang, query.message.message_id) # message edit ‡∂ö‡∂ª‡∂∫‡∑í
    else:
        await query.answer("‚ùå You haven't joined the channel yet.", show_alert=True)


async def show_bot_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, lang: str, edit_message_id: int = None):
    """‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± bot menu (buttons) ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í."""
    keyboard = [
        [
            InlineKeyboardButton(f"üõçÔ∏è {get_string('shop_button', lang)}", callback_data="menu_shop"),
            InlineKeyboardButton(f"üéÅ {get_string('free_button', lang)}", callback_data="menu_free"),
        ],
        [
            InlineKeyboardButton(f"üë§ {get_string('account_button', lang)}", callback_data="menu_account"),
            InlineKeyboardButton(f"üì® {get_string('support_button', lang)}", callback_data="menu_support"),
        ]
    ]
    
    text = get_string('bot_menu_title', lang)
    
    message = update.message or (update.callback_query and update.callback_query.message)
    if not message:
         logger.warning("show_bot_menu: 'message' object ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.")
         return

    if edit_message_id:
        # ‡∂¥‡∑Ä‡∂≠‡∑í‡∂± message ‡∂ë‡∂ö edit ‡∂ö‡∂ª‡∂∫‡∑í (e.g., check_join ‡∂¥‡∑É‡∑î)
        try:
            await context.bot.edit_message_text(
                chat_id=message.chat_id,
                message_id=edit_message_id,
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return # Edit ‡∂ö‡∑Ö ‡∂¥‡∑É‡∑î, exit
        except Exception as e:
            logger.warning(f"Bot menu edit ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
            # Edit fail ‡∑Ä‡∑î‡∂±‡∑ú‡∂≠‡∑ä, ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä message ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∫‡∑Ä‡∂∫‡∑í (‡∂¥‡∑Ñ‡∑Ö code ‡∂ë‡∂ö run ‡∑Ä‡∑ö)
    
    # ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä message ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∫‡∑Ä‡∂∫‡∑í
    await message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))



async def main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± menu ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä handle ‡∂ö‡∂ª‡∂∫‡∑í."""
    query = update.callback_query
    await query.answer()
    
    # --- (FIXED) effective_user ‡∑Ä‡∑ô‡∂±‡∑î‡∑Ä‡∂ß from_user ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ---
    user = query.from_user
    # ----------------------------------------------------
    user_data = await get_user_data(user.id)
    lang = user_data.get('language', 'en')
    
    # User checks (‡∂±‡∑ê‡∑Ä‡∂≠‡∂≠‡∑ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏)
    is_member = await check_channel_membership(user.id, context)
    if not is_member or not user_data.get('is_registered', False):
        # User ‡∂≠‡∑Ä‡∂Ø‡∑î‡∂ª‡∂ß‡∂≠‡∑ä member ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ö ‡∂±‡∂∏‡∑ä, /start ‡∂ë‡∂ö‡∂ß ‡∂∫‡∑ú‡∂∏‡∑î ‡∂ö‡∂ª‡∂∫‡∑í
        await query.message.reply_text("Please /start the bot again.")
        return

    # Menu actions
    action = query.data.split("_")[-1] # "menu_shop" -> "shop"

    # user_checks decorator ‡∂ë‡∂ö‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ kwargs
    kwargs = {'user_data': user_data, 'lang': lang}

    if action == "shop":
        await shop_command(update, context, **kwargs)
    elif action == "free":
        await free_command(update, context, **kwargs)
    elif action == "account":
        await myaccount_command(update, context, **kwargs)
    elif action == "support":
        # Support command ‡∂ë‡∂ö ConversationHandler ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑í‡∑É‡∑è,
        # ‡∂Ö‡∂¥‡∑í command ‡∂ë‡∂ö‡∂ö‡∑ä call ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è ‡∑Ä‡∂ú‡∑ö ‡∂¥‡∂ß‡∂±‡∑ä ‡∂ú‡∂±‡∑ä‡∂± ‡∂ï‡∂±‡∑ö.
        await support_start(update, context, **kwargs)


@user_checks
async def myaccount_command(update: Update, context: ContextTypes.DEFAULT_TYPE, **kwargs):
    """User ‡∂ú‡∑ö coin balance ‡∑É‡∑Ñ referral link ‡∂ë‡∂ö ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í."""
    user_data = kwargs['user_data']
    lang = kwargs['lang']
    user_id = user_data['id']
    
    bot_username = (await context.bot.get_me()).username
    ref_link = f"https{':'}//t.me/{bot_username}?start={user_id}"
    
    text = get_string('my_account', lang).format(
        coins=user_data.get('coins', 0),
        refs=user_data.get('referral_count', 0),
        ref_link=ref_link
    )
    
    message = update.message or update.callback_query.message
    keyboard = [[InlineKeyboardButton(f"‚¨ÖÔ∏è {get_string('back_button', lang)}", callback_data="back_to_menu")]]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
    else:
        await message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)


@user_checks
async def shop_command(update: Update, context: ContextTypes.DEFAULT_TYPE, **kwargs):
    """Premium shop ‡∂ë‡∂ö (buttons) ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í."""
    user_data = kwargs['user_data']
    lang = kwargs['lang']
    
    text = get_string('shop_title', lang).format(coins=user_data.get('coins', 0))
    
    keyboard = []
    # SHOP_PACKAGES dictionary ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∑É‡∑è‡∂Ø‡∂∫‡∑í
    for callback_data, (display_name, price) in SHOP_PACKAGES.items():
        button_text = f"{display_name} - {price} ü™ô"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton(f"‚¨ÖÔ∏è {get_string('back_button', lang)}", callback_data="back_to_menu")])
    
    message = update.message or update.callback_query.message
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)


@user_checks
async def free_command(update: Update, context: ContextTypes.DEFAULT_TYPE, **kwargs):
    """Admin ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä set ‡∂ö‡∑Ö free V2Ray post ‡∂ë‡∂ö forward ‡∂ö‡∂ª‡∂∫‡∑í."""
    lang = kwargs['lang']
    
    admin_settings = await get_admin_settings()
    post_id = admin_settings.get('free_v2ray_post_id')
    
    message = update.message or update.callback_query.message

    if not post_id:
        await message.reply_text(get_string('get_free_v2ray_no_post', lang))
        return

    try:
        # Main Channel ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂Ö‡∂Ø‡∑è‡∑Ö post ‡∂ë‡∂ö forward ‡∂ö‡∂ª‡∂∫‡∑í
        await context.bot.forward_message(
            chat_id=message.chat_id,
            from_chat_id=MAIN_CHANNEL_ID,
            message_id=post_id
        )
        # Follow-up message (Premium ‡∂ú‡∑ê‡∂±)
        await message.reply_text(get_string('get_free_v2ray_follow_up', lang), parse_mode=ParseMode.MARKDOWN_V2)
        
    except Exception as e:
        logger.error(f"Free post (ID: {post_id}) forward ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
        await message.reply_text("Error: Could not retrieve the free V2Ray post. The admin may need to update it.")
    
    if update.callback_query:
        # Callback query ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∂∏‡∑ä, "Back" button ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∫‡∑Ä‡∂∫‡∑í
        keyboard = [[InlineKeyboardButton(f"‚¨ÖÔ∏è {get_string('back_button', lang)}", callback_data="back_to_menu")]]
        await message.reply_text(f"‚¨ÜÔ∏è {get_string('above_is_free', lang)}", reply_markup=InlineKeyboardMarkup(keyboard))


async def shop_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Shop ‡∂ë‡∂ö‡∑ö "Buy" ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä handle ‡∂ö‡∂ª‡∂∫‡∑í."""
    query = update.callback_query
    # --- (FIXED) effective_user ‡∑Ä‡∑ô‡∂±‡∑î‡∑Ä‡∂ß from_user ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ---
    user = query.from_user
    # ----------------------------------------------------
    await query.answer()
    
    user_data = await get_user_data(user.id)
    lang = user_data.get('language', 'en')
    
    package_key = query.data # e.g., "buy_30d_50g"
    
    if package_key not in SHOP_PACKAGES:
        await query.message.reply_text("Error: Invalid package selected.")
        return

    package_name, package_cost = SHOP_PACKAGES[package_key]
    user_coins = user_data.get('coins', 0)

    # Check if user has enough coins
    if user_coins < package_cost:
        await query.message.reply_text(
            get_string('not_enough_coins', lang).format(
                coins=user_coins,
                cost=package_cost
            )
        )
        return

    # --- Purchase is successful ---
    # 1. Deduct coins
    user_data['coins'] = user_coins - package_cost
    await update_user_data(user.id, user_data)
    
    # 2. Notify user
    await query.message.reply_text(
        get_string('purchase_success', lang).format(cost=package_cost)
    )
    
    # 3. Notify admin
    try:
        admin_alert_text = get_string('purchase_alert_to_admin', 'en').format( # Admin ‡∂ß English ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä
            mention=user_mention(user),
            user_id=user.id,
            package_name=package_name,
            cost=package_cost
        )
        await context.bot.send_message(
            chat_id=OWNER_ID,
            text=admin_alert_text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"Admin (ID: {OWNER_ID}) ‡∂ß purchase alert ‡∂ë‡∂ö ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")

    # Go back to menu
    await show_bot_menu(update, context, lang, query.message.message_id)


async def back_to_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """'Back' button (Shop/Account ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä) handle ‡∂ö‡∂ª‡∂∫‡∑í."""
    query = update.callback_query
    await query.answer()
    # --- (FIXED) effective_user ‡∑Ä‡∑ô‡∂±‡∑î‡∑Ä‡∂ß from_user ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ---
    user = query.from_user
    # ----------------------------------------------------
    user_data = await get_user_data(user.id)
    lang = user_data.get('language', 'en')
    
    await show_bot_menu(update, context, lang, query.message.message_id)


# === Support Conversation Handler ===

@user_checks
async def support_start(update: Update, context: ContextTypes.DEFAULT_TYPE, **kwargs):
    """Support conversation ‡∂ë‡∂ö ‡∂¥‡∂ß‡∂±‡∑ä ‡∂ú‡∂±‡∑ì."""
    lang = kwargs['lang']
    text = get_string('support_start', lang)
    
    message = update.message or update.callback_query.message
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2)
        
    return TYPING_SUPPORT_MESSAGE # Conversation ‡∂ë‡∂ö‡∑ö ‡∂ä‡∑Ö‡∂ü state ‡∂ë‡∂ö‡∂ß ‡∂∫‡∂∫‡∑í

async def get_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """User ‡∂ú‡∑ö support message ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ô‡∂± Admin ‡∂ß forward ‡∂ö‡∂ª‡∂∫‡∑í."""
    user = update.effective_user
    user_data = await get_user_data(user.id)
    lang = user_data.get('language', 'en')
    
    message = update.message
    
    # 1. Admin ‡∂ß Forward ‡∂ö‡∂ª‡∂∫‡∑í
    try:
        admin_alert_text = get_string('support_forward_to_admin', 'en').format( # Admin ‡∂ß English ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä
            mention=user_mention(user),
            user_id=user.id
        )
        admin_reply_prompt = get_string('support_reply_admin_prompt', 'en').format(user_id=user.id)
        
        await context.bot.send_message(
            chat_id=OWNER_ID,
            text=admin_alert_text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        # User ‡∂ú‡∑ö message ‡∂ë‡∂ö ‡∑Ä‡∑ô‡∂±‡∂∏ forward ‡∂ö‡∂ª‡∂∫‡∑í (Stickers, Photos ‡∂Ü‡∂Ø‡∑í‡∂∫‡∂ß)
        await message.forward(chat_id=OWNER_ID)
        # Admin ‡∂ß reply ‡∂ö‡∂ª‡∂± ‡∑Ñ‡∑ê‡∂ß‡∑í ‡∂∫‡∑Ä‡∂∫‡∑í
        await context.bot.send_message(
            chat_id=OWNER_ID,
            text=admin_reply_prompt
        )
        
        # 2. User ‡∂ß ‡∂Ø‡∂±‡∑ä‡∑Ä‡∂∫‡∑í
        await message.reply_text(get_string('support_message_sent', lang))
        
    except Exception as e:
        logger.error(f"Support message (User: {user.id}) forward ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
        await message.reply_text("An error occurred while sending your message. Please try again.")

    return ConversationHandler.END # Conversation ‡∂ë‡∂ö ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í

async def cancel_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Support conversation ‡∂ë‡∂ö cancel ‡∂ö‡∂ª‡∂∫‡∑í."""
    user = update.effective_user
    user_data = await get_user_data(user.id)
    lang = user_data.get('language', 'en')
    
    await update.message.reply_text(get_string('support_cancel', lang))
    await show_bot_menu(update, context, lang) # Menu ‡∂ë‡∂ö ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í
    return ConversationHandler.END



# === Admin Command Handlers (Owner ‡∂ß ‡∂¥‡∂∏‡∂´‡∑í) ===

async def admin_only_filter(message: Message, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """Command ‡∂ë‡∂ö Owner ‡∂ú‡∑ô‡∂±‡∑ä ‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∫‡∑í."""
    return message.from_user.id == OWNER_ID

admin_filter = filters.Chat(OWNER_ID) & filters.COMMAND

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin ‡∂ß ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ user ‡∂Ω‡∑è‡∂ß broadcast ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß."""
    message = update.message
    
    if not message.reply_to_message:
        await message.reply_text("Please reply to a message to broadcast it.")
        return

    broadcast_message = message.reply_to_message
    
    # Firestore ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ registered user IDs ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì
    try:
        all_users_docs = await asyncio.to_thread(users_ref.where("is_registered", "==", True).stream)
        user_ids = [doc.id for doc in all_users_docs]
    except Exception as e:
        await message.reply_text(f"Error fetching users from Firestore: {e}")
        return

    if not user_ids:
        await message.reply_text("No registered users found to broadcast to.")
        return

    await message.reply_text(f"Starting broadcast to {len(user_ids)} users...")
    
    success_count = 0
    failed_count = 0
    
    # Batch sending
    for i in range(0, len(user_ids), BROADCAST_BATCH_SIZE):
        batch = user_ids[i:i + BROADCAST_BATCH_SIZE]
        for user_id_str in batch:
            try:
                user_id = int(user_id_str)
                await broadcast_message.copy(chat_id=user_id)
                success_count += 1
            except Exception as e:
                failed_count += 1
                logger.warning(f"Broadcast to user {user_id} failed: {e}")
        
        # Telegram flood limits ‡∑Ä‡∑Ö‡∂ö‡∑ä‡∑Ä‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß sleep
        logger.info(f"Broadcast batch {i//BROADCAST_BATCH_SIZE + 1} sent. Sleeping for {BROADCAST_SLEEP_TIME}s...")
        await asyncio.sleep(BROADCAST_SLEEP_TIME) 
        
    await message.reply_text(
        f"Broadcast finished.\n"
        f"‚úÖ Sent successfully: {success_count}\n"
        f"‚ùå Failed (bot blocked?): {failed_count}"
    )


async def send_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Alias for /broadcast (broadcast command ‡∂ë‡∂ö‡∂∏ call ‡∂ö‡∂ª‡∂∫‡∑í)"""
    await broadcast_command(update, context)


async def setfree_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/free command ‡∂ë‡∂ö ‡∑É‡∂≥‡∑Ñ‡∑è post ID ‡∂ë‡∂ö set ‡∂ö‡∂ª‡∂∫‡∑í."""
    args = context.args
    if not args or not args[0].isdigit():
        await update.message.reply_text("Usage: `/setfree <message_id>`\n\n(Get the ID by forwarding a post from your channel to me.)")
        return
        
    post_id = int(args[0])
    await update_admin_settings({'free_v2ray_post_id': post_id})
    await update.message.reply_text(f"‚úÖ Free V2Ray post ID has been set to: {post_id}")


async def post_id_finder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Channel ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä forward ‡∂ö‡∂ª‡∂± post ‡∑Ä‡∂Ω ID ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂∫‡∑í."""
    message = update.message
    if message.forward_from_chat and message.forward_from_chat.id == MAIN_CHANNEL_ID:
        post_id = message.forward_from_message_id
        await message.reply_text(
            f"Message ID from channel found: `{post_id}`\n\n"
            f"Use this command to set it:\n"
            f"`/setfree {post_id}`",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await message.reply_text("This is not a forwarded post from your Main Channel.")


async def addcoins_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """User ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑î‡∂ß manually coins ‡∂Ø‡∑ì‡∂∏‡∂ß."""
    args = context.args
    if len(args) != 2 or not args[0].isdigit() or not args[1].isdigit():
        await update.message.reply_text("Usage: `/addcoins <user_id> <amount>`")
        return

    target_user_id = int(args[0])
    amount = int(args[1])
    
    try:
        user_data = await get_user_data(target_user_id)
        if not user_data.get('is_registered', False):
            await update.message.reply_text(f"Error: User ID {target_user_id} is not registered yet.")
            return
            
        user_data['coins'] = user_data.get('coins', 0) + amount
        await update_user_data(target_user_id, user_data)
        
        await update.message.reply_text(f"‚úÖ Added {amount} coins to User ID {target_user_id}. New balance: {user_data['coins']} ü™ô")
        
        # User ‡∂ß ‡∂Ø‡∂±‡∑ä‡∑Ä‡∂∫‡∑í
        try:
            lang = user_data.get('language', 'en')
            await context.bot.send_message(
                chat_id=target_user_id,
                text=f"üéÅ Admin has added {amount} coins to your account! Your new balance is {user_data['coins']} ü™ô."
                     if lang == 'en' else
                     f"üéÅ Admin ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ú‡∑í‡∂´‡∑î‡∂∏‡∂ß ‡∂ö‡∑è‡∑É‡∑í {amount} ‡∂ö‡∑ä ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì! ‡∂î‡∂∂‡∂ú‡∑ö ‡∂±‡∑Ä ‡∑Å‡∑ö‡∑Ç‡∂∫ {user_data['coins']} ü™ô."
            )
        except Exception as e:
            logger.warning(f"User {target_user_id} ‡∂ß addcoins alert ‡∂ë‡∂ö ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {e}")
            
    except Exception as e:
        await update.message.reply_text(f"An error occurred: {e}")


async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Support ticket ‡∂ë‡∂ö‡∂ö‡∂ß ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î (reply) ‡∂∫‡∑Ä‡∂∫‡∑í."""
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("Usage: `/reply <user_id> <message_text>`")
        return

    try:
        target_user_id = int(args[0])
    except ValueError:
        await update.message.reply_text("Invalid User ID. Usage: `/reply <user_id> <message_text>`")
        return
        
    reply_message = " ".join(args[1:])
    
    try:
        target_user_data = await get_user_data(target_user_id)
        lang = target_user_data.get('language', 'en')
        
        await context.bot.send_message(
            chat_id=target_user_id,
            text=get_string('support_reply_received_user', lang).format(message=reply_message),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        await update.message.reply_text(
            get_string('support_reply_success_admin', 'en').format(user_id=target_user_id)
        )
        
    except Exception as e:
        logger.error(f"Support reply to {target_user_id} failed: {e}")
        await update.message.reply_text(
            get_string('support_reply_fail_admin', 'en').format(user_id=target_user_id, error=e)
        )


# === Main Function (Bot ‡∂ë‡∂ö ‡∂¥‡∂´ ‡∂ú‡∂±‡∑ä‡∑Ä‡∂∫‡∑í) ===

def main():
    """Bot ‡∂ë‡∂ö ‡∂¥‡∂´ ‡∂ú‡∂±‡∑ä‡∑Ä‡∑è run ‡∂ö‡∂ª‡∂∫‡∑í."""
    
    try:
        # Bot token ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä Application ‡∂ë‡∂ö ‡∑É‡∑è‡∂Ø‡∂∫‡∑í
        application = Application.builder().token(BOT_TOKEN).build()
    except Exception as e:
        logger.critical(f"Bot Token ‡∂ë‡∂ö‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
        logger.critical("Bot Token ‡∂ë‡∂ö 'BOT_TOKEN' variable ‡∂ë‡∂ö‡∑ö ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠‡∑ä‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
        return

    # --- Support Conversation Handler ---
    support_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("support", user_checks(support_start)),
            CallbackQueryHandler(main_menu_callback, pattern="^menu_support$")
        ],
        states={
            TYPING_SUPPORT_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_support_message)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_support)],
    )
    
    # --- User Handlers ---
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("register", register_command))
    application.add_handler(CallbackQueryHandler(language_button_handler, pattern="^lang_"))
    application.add_handler(CallbackQueryHandler(check_join_callback, pattern="^check_join_"))
    
    # Main Menu Commands & Callbacks
    # user_checks decorator ‡∂ë‡∂ö command ‡∂ë‡∂ö‡∂ß‡∂∏ bind ‡∂ö‡∂ª‡∂∫‡∑í
    application.add_handler(CommandHandler("myaccount", myaccount_command))
    application.add_handler(CommandHandler("shop", shop_command))
    application.add_handler(CommandHandler("free", free_command))
    
    # Menu ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä (shop, free, account) main_menu_callback ‡∂ë‡∂ö‡∂ß ‡∂∫‡∑ú‡∂∏‡∑î ‡∂ö‡∂ª‡∂∫‡∑í
    application.add_handler(CallbackQueryHandler(main_menu_callback, pattern="^menu_(shop|free|account)$"))
    application.add_handler(CallbackQueryHandler(back_to_menu_callback, pattern="^back_to_menu$"))
    
    # Shop "Buy" buttons
    application.add_handler(CallbackQueryHandler(shop_button_handler, pattern="^buy_"))
    
    # Support Handler (ConversationHandler ‡∂ë‡∂ö)
    application.add_handler(support_conv_handler)
    
    
    # --- Admin Handlers (Owner ‡∂ß ‡∂¥‡∂∏‡∂´‡∑í) ---
    application.add_handler(CommandHandler("broadcast", broadcast_command, filters=admin_filter))
    application.add_handler(CommandHandler("send", send_command, filters=admin_filter))
    application.add_handler(CommandHandler("setfree", setfree_command, filters=admin_filter))
    application.add_handler(CommandHandler("addcoins", addcoins_command, filters=admin_filter))
    application.add_handler(CommandHandler("reply", reply_command, filters=admin_filter))
    
    # Admin Post ID Finder (Owner ‡∂ú‡∑ô‡∂±‡∑ä ‡∂ë‡∂± forward ‡∑Ä‡∂Ω‡∂ß)
    application.add_handler(MessageHandler(
        filters.FORWARDED & filters.Chat(OWNER_ID),
        post_id_finder
    ))
    
    # --- Error Handler ---
    # application.add_error_handler(error_handler) # (‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö)

    # Bot Run
    logger.info("Bot is starting to poll...")
    application.run_polling()


if __name__ == "__main__":
    main()

