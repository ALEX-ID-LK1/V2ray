# -*- coding: utf-8 -*-

"""
FreeV2ray Telegram Bot (Firebase + Multi-Language Edition)

‡∂∏‡∑ô‡∂∏ bot ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ô‡∂ª:
1.  `pip install python-telegram-bot firebase-admin` install ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
2.  ‡∂î‡∂∂‡∂ú‡∑ö Firebase `serviceAccountKey.json` file ‡∂ë‡∂ö ‡∂∏‡∑ô‡∂∏ file ‡∂ë‡∂ö ‡∂á‡∂≠‡∑í ‡∂≠‡∑ê‡∂±‡∂∏ ‡∂≠‡∂∂‡∂±‡∑ä‡∂±.
"""

import logging
import asyncio
from functools import wraps
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, 
    filters, CallbackQueryHandler
)
from telegram.error import Forbidden, BadRequest

# Firebase Admin SDK
import firebase_admin
from firebase_admin import credentials, firestore
from google.cloud.firestore_v1.base_query import FieldFilter

# --- CONFIGURATION (‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∑ô‡∂∫ ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∂¥‡∑î‡∂ª‡∑Ä‡∂±‡∑ä‡∂±) ---
BOT_TOKEN = "7015662481:AAGYK7Buir3TIezH38jpeeQ4mvQydY7tI_g"
OWNER_ID = 6687619682
MAIN_CHANNEL_ID = -1003209750658
CHANNEL_INVITE_LINK = "https://t.me/freev2rayx"
REFERRAL_COIN_VALUE = 20
BROADCAST_BATCH_SIZE = 25

# --- (NEW) Multi-Language Strings (‡∂∑‡∑è‡∑Ç‡∑è ‡∂ú‡∂∂‡∂©‡∑è‡∑Ä) ---
STRINGS = {
    'en': {
        'select_language': "üëã Welcome! Please select your language:",
        'please_join': "**üõë Stop!**\n\nTo use this bot, you must first join our main channel.\n\nJoin the channel, then click /start again.",
        'welcome_not_registered': "Welcome {first_name}! üá±üá∞\n\nTo get your referral link and use all bot services (Shop, Free V2ray), please register first.\n\nüëâ Type /register to register.",
        'welcome_registered': "Welcome back, {first_name}! üá±üá∞\n\nüí∞ **Your Coin Balance:** {coins} Coins\n\n**Available Commands:**\nüõí /shop - Buy premium packages.\nüéÅ /free - Get the daily free V2ray config.\nüìä /myaccount - View your account and referral link.",
        'err_not_registered': "üîí **You are not registered!**\n\nTo use this feature, please type /register first.",
        'register_success': "‚úÖ **Registration Successful!**\n\nYou can now use /shop and /free.\n\nüîó **Your Referral Link:**\n`{link}`\n\nShare this link and earn **{value} Coins** for each referral!",
        'register_already': "‚úÖ You are already registered!\n\nUse /myaccount to get your referral link.",
        'referral_notify': "üéâ Congratulations! {user_name} registered using your link.\nYou received **{value} Coins**!\n\nüí∞ **Your new Coin Balance:** {new_balance} Coins",
        'my_account': "**üìä My Account**\n\nüìà **Total Referrals:** {ref_count}\nüí∞ **Coin Balance:** {coins} Coins\n\nüîó **Your Referral Link:**\n`{link}`\n\nType /shop to buy V2ray packages.",
        'shop_title': "üõí **FreeV2ray Shop** üõí\n\nYour Coin Balance: {coins} Coins\n\nChoose a package to buy using your coins:",
        'free_no_config': "üòï **Sorry!**\n\nThe owner has not set a free V2ray config for today yet.\nPlease check back later.",
        'free_success_followup': "üöÄ **Enjoy your free V2ray!** üöÄ\n\nThis is a free config, so speed and stability might be limited.\n\nFor an uninterrupted, high-speed premium server, check out our packages!\nüëâ Type /shop **to see prices!**\nüëâ Type /myaccount **to earn more coins!**",
        'err_admin_post_deleted': "‚õî **Error!**\nThe post set by the owner was deleted from the channel. Please inform the admin.",
        'err_generic': "‚õî An error occurred! Please try again later. (Error: {e})",
        'buy_success': "‚úÖ **Purchase Successful!**\n\nYou bought '{package_name}'.\nYour new Coin Balance: {new_balance} Coins\n\nThe Owner (Admin) will contact you shortly. üá±üá∞",
        'buy_fail_coins': "‚ö†Ô∏è **Insufficient Coins!**\n\nTo buy '{package_name}', you need {price} Coins.\nYou only have {balance} Coins.\n\nShare your referral link to earn more!",
        'buy_err_tx': "‚õî Transaction error! Please try again.",
        'buy_err_no_package': "‚õî Error! This package is no longer available."
    },
    'si': {
        'select_language': "üëã ‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä! ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂î‡∂∂‡∂ú‡∑ö ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:",
        'please_join': "**üõë ‡∂±‡∑Ä‡∂≠‡∑í‡∂±‡∑ä‡∂±!**\n\n‡∂∂‡∑ú‡∂ß‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß, ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑Ö‡∂∏‡∑î‡∑Ä ‡∂Ö‡∂¥‡∂ú‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂±‡∑è‡∂Ω‡∑í‡∂ö‡∑è‡∑Ä‡∂ß (Main Channel) ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∂±‡∑ä‡∂±.\n\nChannel ‡∂ë‡∂ö‡∂ß Join ‡∑Ä‡∑ñ ‡∂¥‡∑É‡∑î, ‡∂±‡∑ê‡∑Ä‡∂≠ /start ‡∂î‡∂∂‡∂±‡∑ä‡∂±.",
        'welcome_not_registered': "‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä {first_name}! üá±üá∞\n\nBot ‡∂ú‡∑ö ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑É‡∑ö‡∑Ä‡∑è‡∑Ä‡∂±‡∑ä (Shop, Free V2ray) ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∑É‡∑Ñ ‡∂î‡∂∂‡∂ú‡∑ö referral link ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß, ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑Ö‡∂∏‡∑î‡∑Ä ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∂±‡∑ä‡∂±.\n\nüëâ ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑ì‡∂∏‡∂ß /register ‡∂Ω‡∑ô‡∑É type ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
        'welcome_registered': "‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä {first_name}, ‡∂±‡∑ê‡∑Ä‡∂≠‡∂≠‡∑ä ‡∑É‡∑è‡∂Ø‡∂ª‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂ú‡∂±‡∑í‡∂∏‡∑î! üá±üá∞\n\nüí∞ **‡∂î‡∂∂‡∂ú‡∑ö Coin Balance:** {coins} Coins\n\n**‡∂î‡∂∂‡∂ß ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö:**\nüõí /shop - Premium packages ‡∂∏‡∑í‡∂Ω‡∂Ø‡∑ì ‡∂ú‡∂±‡∑ä‡∂±.\nüéÅ /free - ‡∂Ø‡∑Ä‡∑É‡∑ö ‡∂±‡∑ú‡∂∏‡∑í‡∂Ω‡∑ö V2ray config ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ä‡∂±.\nüìä /myaccount - ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ú‡∑í‡∂´‡∑î‡∂∏ ‡∑É‡∑Ñ referral link ‡∂ë‡∂ö ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±.",
        'err_not_registered': "üîí **‡∂î‡∂∂ ‡∂≠‡∑Ä‡∂∏ ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑ì ‡∂±‡∑ê‡∂≠!**\n\n‡∂∏‡∑ô‡∂∏ ‡∑É‡∑ö‡∑Ä‡∑è‡∑Ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß, ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑Ö‡∂∏‡∑î‡∑Ä /register ‡∂Ω‡∑ô‡∑É type ‡∂ö‡∂ª ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∂±‡∑ä‡∂±.",
        'register_success': "‚úÖ **‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í!**\n\n‡∂î‡∂∂‡∂ß ‡∂Ø‡∑ê‡∂±‡∑ä /shop ‡∑É‡∑Ñ /free commands ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö.\n\nüîó **‡∂î‡∂∂‡∂ú‡∑ö Referral Link ‡∂ë‡∂ö:**\n`{link}`\n\n‡∂∏‡∑ô‡∂∏ link ‡∂ë‡∂ö share ‡∂ö‡∂ª ‡∂ë‡∂ö‡∑ä referral ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑î ‡∑É‡∂≥‡∑Ñ‡∑è **Coin {value}** ‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ä‡∂±!",
        'register_already': "‚úÖ ‡∂î‡∂∂ ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑ì ‡∂á‡∂≠!\n\n/myaccount ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂î‡∂∂‡∂ú‡∑ö referral link ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ä‡∂±.",
        'referral_notify': "üéâ ‡∑É‡∑î‡∂∑ ‡∂¥‡∑ê‡∂≠‡∑î‡∂∏‡∑ä! {user_name} ‡∂î‡∂∂‡∂ú‡∑ö link ‡∂ë‡∂ö ‡∑Ñ‡∂ª‡∑Ñ‡∑è ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑í‡∂∫.\n‡∂î‡∂∂‡∂ß **Coin {value}** ‡∂ö‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑í!\n\nüí∞ **‡∂î‡∂∂‡∂ú‡∑ö ‡∂±‡∑Ä Coin Balance:** {new_balance} Coins",
        'my_account': "**üìä ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ú‡∑í‡∂´‡∑î‡∂∏ (My Account)**\n\nüìà **‡∂∏‡∑î‡∑Ö‡∑î Referral ‡∂ú‡∂´‡∂±:** {ref_count}\nüí∞ **Coin Balance:** {coins} Coins\n\nüîó **‡∂î‡∂∂‡∂ú‡∑ö Referral Link ‡∂ë‡∂ö:**\n`{link}`\n\nV2ray packages ‡∂∏‡∑í‡∂Ω‡∂Ø‡∑ì ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß /shop ‡∂Ω‡∑ô‡∑É type ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
        'shop_title': "üõí **FreeV2ray Shop** üõí\n\n‡∂î‡∂∂‡∂ú‡∑ö Coin Balance: {coins} Coins\n\n‡∂î‡∂∂‡∂ú‡∑ö Coin ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í package ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:",
        'free_no_config': "üòï **‡∑É‡∂∏‡∑è‡∑Ä‡∂±‡∑ä‡∂±!**\n\nOwner ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä ‡∂≠‡∑Ä‡∂∏‡∂≠‡∑ä ‡∂Ö‡∂Ø ‡∂Ø‡∑í‡∂± ‡∂±‡∑ú‡∂∏‡∑í‡∂Ω‡∑ö V2ray config ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂±‡∑ê‡∂≠.\n‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂Ø ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä‡∂ö‡∑í‡∂±‡∑ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
        'free_success_followup': "üöÄ **Enjoy your free V2ray!** üöÄ\n\n‡∂∏‡∑ô‡∂∫ ‡∂±‡∑ú‡∂∏‡∑í‡∂Ω‡∑ö ‡∂Ø‡∑ô‡∂± config ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑í‡∑É‡∑è ‡∑Ä‡∑ö‡∂ú‡∂∫ ‡∑É‡∑Ñ ‡∑É‡∑ä‡∂Æ‡∑è‡∑Ä‡∂ª‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂Ö‡∂©‡∑î ‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö.\n\n‡∂≠‡∂Ø‡∂∂‡∂Ø‡∂∫‡∂ö‡∑ä ‡∂±‡∑ê‡∂≠‡∑í, ‡∂Ö‡∂∞‡∑í ‡∑Ä‡∑ö‡∂ú‡∑ì Premium server ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è, ‡∂Ö‡∂¥‡∂ú‡∑ö Premium packages ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±.\nüëâ /shop **‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª ‡∂∏‡∑í‡∂Ω ‡∂ú‡∂´‡∂±‡∑ä ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±!**\nüëâ /myaccount **‡∂∏‡∂ú‡∑í‡∂±‡∑ä coin ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂ú‡∂±‡∑ä‡∂±!**",
        'err_admin_post_deleted': "‚õî **‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä!**\nOwner ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä set ‡∂ö‡∑Ö post ‡∂ë‡∂ö channel ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä delete ‡∂ö‡∂ª ‡∂á‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª Admin ‡∂ß ‡∂Ø‡∂±‡∑ä‡∑Ä‡∂±‡∑ä‡∂±.",
        'err_generic': "‚õî ‡∂∫‡∂∏‡∑ä ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂Ø ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä‡∂ö‡∑í‡∂±‡∑ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. (Error: {e})",
        'buy_success': "‚úÖ **‡∂∏‡∑í‡∂Ω‡∂Ø‡∑ì ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í!**\n\n‡∂î‡∂∂ '{package_name}' ‡∂∏‡∑í‡∂Ω‡∂Ø‡∑ì ‡∂ú‡∂≠‡∑ä‡∂≠‡∑è.\n‡∂î‡∂∂‡∂ú‡∑ö ‡∂±‡∑Ä Coin Balance: {new_balance} Coins\n\nOwner (Admin) ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä ‡∂î‡∂∂‡∑Ä ‡∂ö‡∑ô‡∂ß‡∑í ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä‡∂ö‡∑í‡∂±‡∑ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∂ö‡∂ª‡∂ú‡∂±‡∑î ‡∂á‡∂≠. üá±üá∞",
        'buy_fail_coins': "‚ö†Ô∏è **Coin ‡∂∏‡∂Ø‡∑í! (Insufficient Coins)**\n\n'{package_name}' ‡∂∏‡∑í‡∂Ω‡∂Ø‡∑ì ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß Coin {price} ‡∂ö‡∑ä ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∑Ä‡∑ö.\n‡∂î‡∂∂ ‡∑É‡∂≠‡∑î‡∑Ä ‡∂á‡∂≠‡∑ä‡∂≠‡∑ö Coin {balance} ‡∂ö‡∑ä ‡∂¥‡∂∏‡∂´‡∑í.\n\nReferral link ‡∂ë‡∂ö share ‡∂ö‡∂ª ‡∂≠‡∑Ä‡∂≠‡∑ä Coin ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂ú‡∂±‡∑ä‡∂±!",
        'buy_err_tx': "‚õî ‡∂ú‡∂±‡∑î‡∂Ø‡∑ô‡∂±‡∑î‡∑Ä‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä! ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
        'buy_err_no_package': "‚õî ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä! ‡∂∏‡∑ô‡∂∏ Package ‡∂ë‡∂ö ‡∂≠‡∑Ä‡∂Ø‡∑î‡∂ª‡∂ß‡∂≠‡∑ä ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ê‡∂≠."
    }
}

# --- Shop Packages (‡∂∏‡∑ô‡∂∫ ‡∂±‡∑ú‡∑Ä‡∑ô‡∂±‡∑É‡∑ä‡∑Ä ‡∂¥‡∑Ä‡∂≠‡∑ì) ---
PRODUCTS = {
    "30d_50gb": {"name": "30 Day - 50GB", "price": 100},
    "30d_100gb": {"name": "30 Day - 100GB", "price": 200},
    "30d_unlimited": {"name": "30 Day - Unlimited", "price": 300},
    "50d_50gb": {"name": "50 Day - 50GB", "price": 200},
    "50d_100gb": {"name": "50 Day - 100GB", "price": 300},
    "50d_unlimited": {"name": "50 Day - Unlimited", "price": 400},
}

# --- Logging (‡∂Ø‡∑ù‡∑Ç ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è‡∑Ä ‡∑É‡∂≥‡∑Ñ‡∑è) ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Firebase Initialization (Firebase ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏) ---
try:
    # Render ‡∑Ä‡∑ê‡∂±‡∑í platform ‡∑Ä‡∂Ω‡∂Ø‡∑ì, serviceAccountKey.json file ‡∂ë‡∂ö
    # .gitignore ‡∂ö‡∂ª ‡∂á‡∂≠‡∑í ‡∂±‡∑í‡∑É‡∑è, ‡∂ë‡∂∫ ‡∂¥‡∂ª‡∑í‡∑É‡∂ª ‡∑Ä‡∑í‡∂†‡∂Ω‡∑ä‚Äç‡∂∫‡∂∫‡∂ö‡∑í‡∂±‡∑ä (Env Variable)
    # ‡∑Ñ‡∑ù "Secret File" ‡∂ë‡∂ö‡∂ö‡∑í‡∂±‡∑ä ‡∂¥‡∑ê‡∂∏‡∑í‡∂´‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.
    # ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∑ö‡∂≠‡∂∫ file ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂ë‡∂∫ ‡∂∂‡∂Ω‡∑è‡∂¥‡∑ú‡∂ª‡∑ú‡∂≠‡∑ä‡∂≠‡∑î ‡∑Ä‡∑ö.
    cred = credentials.Certificate("serviceAccountKey.json")
    firebase_admin.initialize_app(cred)
    db = firestore.client()
    logger.info("Firebase ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì!")
except FileNotFoundError:
    logger.critical("FATAL ERROR: `serviceAccountKey.json` file ‡∂ë‡∂ö ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫!")
    logger.critical("‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª Render/VPS ‡∑Ä‡∑ô‡∂≠ Secret File ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂∏‡∑ô‡∂∫ upload ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
    # Render/VPS ‡∂∏‡∂≠ deploy ‡∂ö‡∂ª‡∂± ‡∑Ä‡∑í‡∂ß, bot ‡∂ë‡∂ö crash ‡∑Ä‡∑ì‡∂∏ ‡∑Ä‡∑ê‡∂Ω‡∑ê‡∂ö‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß
    # ‡∂∏‡∑ô‡∂≠‡∑ê‡∂±‡∑í‡∂±‡∑ä exit() ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂∏‡∑Ñ‡∂ª‡∑Ä‡∑í‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∑ú‡∑Ä‡∂±‡∑î ‡∂á‡∂≠, 
    # ‡∂±‡∂∏‡∑î‡∂≠‡∑ä file ‡∂ë‡∂ö ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í‡∑Ä bot ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è ‡∂±‡∑ú‡∂ö‡∂ª‡∂∫‡∑í.
    # Deployment ‡∂¥‡∂ª‡∑í‡∑É‡∂ª‡∂∫ ‡∂Ö‡∂±‡∑î‡∑Ä ‡∂∏‡∑ô‡∂∫ ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.
    # ‡∂Ø‡∑ê‡∂±‡∂ß, file ‡∂ë‡∂ö ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä bot ‡∂ë‡∂ö ‡∂±‡∂≠‡∂ª ‡∑Ä‡∑ö.
    exit(1) # ‡∂±‡∂≠‡∂ª ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
except Exception as e:
    logger.critical(f"Firebase ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
    exit(1) # ‡∂±‡∂≠‡∂ª ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏

# --- (NEW) Helper Function: Get String ---
def get_string(lang_code: str, key: str) -> str:
    """
    ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö‡∑Ä ‡∂±‡∑í‡∂∫‡∂∏‡∑í‡∂≠ string ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂∫‡∑í.
    'si' (Sinhala) ‡∂∫‡∂±‡∑î default ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂∫‡∑í.
    """
    if lang_code not in STRINGS:
        lang_code = 'si' # Default to Sinhala
    
    return STRINGS.get(lang_code, {}).get(key, f"STR_ERR: {key}")

# --- Firestore Helper Functions ---

async def get_user_doc(user_id: int, first_name: str = "User", username: str = "") -> firestore.DocumentSnapshot:
    """
    User ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑ä Firestore ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì.
    ‡∂î‡∑Ñ‡∑î/‡∂á‡∂∫ ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í ‡∂±‡∂∏‡∑ä, ‡∂±‡∑Ä document ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑É‡∑è‡∂Ø‡∂∫‡∑í.
    (NEW) 'language' field ‡∂ë‡∂ö ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª ‡∂á‡∂≠.
    """
    user_id_str = str(user_id)
    doc_ref = db.collection('users').document(user_id_str)
    doc = await doc_ref.get()
    
    if not doc.exists:
        user_data = {
            "user_id": user_id,
            "first_name": first_name,
            "username": username,
            "is_registered": False,
            "referral_count": 0,
            "coins": 0,
            "referred_by": None,
            "language": "si", # Default language
            "joined_date": firestore.SERVER_TIMESTAMP
        }
        await doc_ref.set(user_data)
        doc = await doc_ref.get() # ‡∂±‡∑Ä ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì
        logger.info(f"‡∂±‡∑Ä user {user_id} ({first_name}) Firestore ‡∑Ä‡∑ô‡∂≠ ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.")
    
    return doc

async def get_bot_settings() -> dict:
    doc_ref = db.collection('config').document('bot_settings')
    doc = await doc_ref.get()
    if doc.exists:
        return doc.to_dict()
    else:
        await doc_ref.set({'free_v2ray_post_id': None})
        return {'free_v2ray_post_id': None}

# --- General Helper Functions ---

async def is_user_in_channel(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id=MAIN_CHANNEL_ID, user_id=user_id)
        if member.status in ['creator', 'administrator', 'member']:
            return True
    except (Forbidden, BadRequest) as e:
        logger.error(f"Channel check error (Bot channel ‡∂ë‡∂ö‡∑ö admin ‡∂Ø?): {e}")
    except Exception as e:
        logger.error(f"Unknown channel check error: {e}")
    return False

async def send_join_channel_message(target, lang: str = 'si'):
    """
    (UPDATED) Channel ‡∂ë‡∂ö‡∂ß join ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ (‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö‡∑Ä) ‡∂∫‡∑Ä‡∂∫‡∑í.
    """
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("Channel ‡∂ë‡∂ö‡∂ß Join ‡∑Ä‡∂±‡∑ä‡∂± / Join Channel", url=CHANNEL_INVITE_LINK)]
    ])
    text = get_string(lang, 'please_join')
    
    try:
        if isinstance(target, Update): # message ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∂∏‡∑ä
            target_message = target.message or target.callback_query.message
            if target_message:
                await target_message.reply_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        else: # target ‡∂ë‡∂ö message object ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∂∏‡∑ä (fallback)
            await target.reply_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Send Join Msg Error: {e}")


# --- (UPDATED) Pre-check Decorator ---

def user_checks(check_registered: bool = True):
    """
    Decorator: Channel join ‡∑É‡∑Ñ registration (‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö‡∑Ä) ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∫‡∑í.
    """
    def decorator(func):
        @wraps(func)
        async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user = update.effective_user
            if not user:
                return # User ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂±‡∂∏‡∑ä ‡∂±‡∂≠‡∂ª ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏

            # User doc ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ (‡∂∏‡∑ô‡∑Ñ‡∑í‡∂Ø‡∑ì ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂Ø ‡∂Ω‡∑ê‡∂∂‡∑ö)
            user_doc = await get_user_doc(user.id, user.first_name, user.username)
            user_data = user_doc.to_dict()
            lang = user_data.get('language', 'si') # User ‡∂ú‡∑ö ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏

            # 1. Channel Check (‡∑É‡∑ê‡∂∏‡∑Ä‡∑í‡∂ß‡∂∏)
            if not await is_user_in_channel(user.id, context):
                await send_join_channel_message(update, lang)
                return

            # 2. Register Check (‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä ‡∂¥‡∂∏‡∂´‡∑í)
            if check_registered and not user_data.get('is_registered', False):
                await update.message.reply_text(
                    get_string(lang, 'err_not_registered'),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # Checks ok, user_data (‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∑É‡∂∏‡∂ú) command ‡∂ë‡∂ö‡∂ß pass ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            return await func(update, context, user_data=user_data, *args, **kwargs)
        return wrapped
    return decorator

# === Command Handlers (‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂Ö‡∂´) ===

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    (NEW) /start command.
    ‡∑Ä‡∑ô‡∂± ‡∂ö‡∑í‡∑É‡∑í‡∑Ä‡∂ö‡∑ä ‡∂±‡∑ú‡∂ö‡∂ª, ‡∂∑‡∑è‡∑Ç‡∑è ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∑ö ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í.
    """
    if not update.message: return # Message ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í‡∂±‡∂∏‡∑ä (e.g. channel post)

    keyboard = [
        [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")],
        [InlineKeyboardButton("üá±üá∞ ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω (Sinhala)", callback_data="lang_si")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        get_string('en', 'select_language') + "\n\n" + get_string('si', 'select_language'),
        reply_markup=reply_markup
    )

async def language_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    (NEW) ‡∂∑‡∑è‡∑Ç‡∑è ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∑ö ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä (lang_en / lang_si) handle ‡∂ö‡∂ª‡∂∫‡∑í.
    ‡∂∏‡∑ô‡∂∫ ‡∂¥‡∑ê‡∂ª‡∂´‡∑í /start logic ‡∂ë‡∂ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∑É‡∑ä‡∂Æ‡∑è‡∂¥‡∂±‡∂∫ ‡∂ö‡∂ª‡∂∫‡∑í.
    """
    query = update.callback_query
    if not query or not query.message: return
        
    await query.answer()
    
    user = query.effective_user
    if not user: return

    lang_code = query.data.split('_')[1] # 'en' or 'si'

    # 1. User doc ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ô‡∂± ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä Save ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    user_doc = await get_user_doc(user.id, user.first_name, user.username)
    await user_doc.reference.update({"language": lang_code})
    
    user_data = (await user_doc.reference.get()).to_dict() # ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂Ø‡∂≠‡∑ä‡∂≠

    # 2. Channel Check
    if not await is_user_in_channel(user.id, context):
        await send_join_channel_message(query.message, lang_code)
        return

    # User channel ‡∂ë‡∂ö‡∑ö ‡∑É‡∑í‡∂ß‡∑ì.
    # 3. Register Check
    if not user_data.get('is_registered', False):
        # --- ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑ì ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ---
        text = get_string(lang_code, 'welcome_not_registered').format(first_name=user.first_name)
    else:
        # --- ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑ì ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä (Bot Menu) ---
        text = get_string(lang_code, 'welcome_registered').format(
            first_name=user.first_name,
            coins=user_data.get('coins', 0)
        )
    
    # User ‡∂ß ‡∂≠‡∑ö‡∂ª‡∑ñ ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∑ô‡∂±‡∑ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ì‡∂∏
    try:
        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN)
    except BadRequest as e:
        if "message is not modified" in str(e):
            pass # Message ‡∂ë‡∂ö ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∑Ä‡∑ì ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä, ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂±‡∑ú‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑ì‡∂∏
        else:
            logger.warning(f"Language button edit error: {e}")
            await query.message.reply_text(text, parse_mode=ParseMode.MARKDOWN) # Fallback


async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    (UPDATED) /register command (‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö‡∑Ä)
    """
    user = update.effective_user
    if not user or not update.message: return

    # (‡∂∏‡∑ô‡∑Ñ‡∑í decorator ‡∂±‡∑ê‡∂≠. Manual checks)
    user_doc_ref = db.collection('users').document(str(user.id))
    user_doc = await user_doc_ref.get()
    
    if not user_doc.exists:
        user_doc = await get_user_doc(user.id, user.first_name, user.username)
        
    user_data = user_doc.to_dict()
    lang = user_data.get('language', 'si')

    # 1. Channel Check
    if not await is_user_in_channel(user.id, context):
        await send_join_channel_message(update.message, lang)
        return

    # 2. ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä register ‡∂Ø?
    if user_data.get('is_registered', False):
        await update.message.reply_text(get_string(lang, 'register_already'))
        return

    # --- ‡∂±‡∑Ä ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í‡∂∫ ---
    await user_doc_ref.update({"is_registered": True})
    
    bot_username = context.bot_data.get('username', 'YOUR_BOT_USERNAME')
    referral_link = f"https://t.me/{bot_username}?start={user.id}"
    
    text = get_string(lang, 'register_success').format(
        link=referral_link,
        value=REFERRAL_COIN_VALUE
    )
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True
    )

    # 3. Referral Logic
    referrer_id = None
    if context.args:
        try: referrer_id = int(context.args[0])
        except (IndexError, ValueError): pass

    if user_data.get('referred_by') is None and referrer_id and referrer_id != user.id:
        referrer_doc_ref = db.collection('users').document(str(referrer_id))
        referrer_doc = await referrer_doc_ref.get()

        if referrer_doc.exists:
            referrer_lang = referrer_doc.to_dict().get('language', 'si')
            
            await referrer_doc_ref.update({
                "coins": firestore.Increment(REFERRAL_COIN_VALUE),
                "referral_count": firestore.Increment(1)
            })
            await user_doc_ref.update({"referred_by": referrer_id})
            
            try:
                new_balance = (referrer_doc.to_dict().get('coins', 0)) + REFERRAL_COIN_VALUE
                notify_text = get_string(referrer_lang, 'referral_notify').format(
                    user_name=user.first_name,
                    value=REFERRAL_COIN_VALUE,
                    new_balance=new_balance
                )
                await context.bot.send_message(chat_id=referrer_id, text=notify_text)
            except Exception as e:
                logger.warning(f"Referrer {referrer_id} ‡∂ß message ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {e}")

@user_checks(check_registered=True)
async def myaccount_command(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: dict = None):
    """
    (UPDATED) /myaccount (‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö‡∑Ä)
    """
    user = update.effective_user
    lang = user_data.get('language', 'si')
    bot_username = context.bot_data.get('username', 'YOUR_BOT_USERNAME')
    referral_link = f"https://t.me/{bot_username}?start={user.id}"
    
    text = get_string(lang, 'my_account').format(
        ref_count=user_data.get('referral_count', 0),
        coins=user_data.get('coins', 0),
        link=referral_link
    )
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True
    )

@user_checks(check_registered=True)
async def shop_command(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: dict = None):
    """
    (UPDATED) /shop (‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö‡∑Ä)
    """
    lang = user_data.get('language', 'si')
    coin_balance = user_data.get('coins', 0)
    
    keyboard = []
    for key, product in PRODUCTS.items():
        text = f"{product['name']} - {product['price']} Coins"
        callback_data = f"buy_{key}"
        keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])

    reply_markup = InlineKeyboardMarkup(keyboard)
    text = get_string(lang, 'shop_title').format(coins=coin_balance)
    
    await update.message.reply_text(text, reply_markup=reply_markup)

@user_checks(check_registered=True)
async def free_command(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: dict = None):
    """
    (UPDATED) /free (‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö‡∑Ä)
    """
    user_id = update.effective_user.id
    lang = user_data.get('language', 'si')
    settings = await get_bot_settings()
    post_id = settings.get('free_v2ray_post_id')
    
    if not post_id or post_id == 0:
        await update.message.reply_text(get_string(lang, 'free_no_config'))
        return

    try:
        # 1. Free V2ray ‡∂ë‡∂ö Forward ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
        await context.bot.forward_message(
            chat_id=user_id,
            from_chat_id=MAIN_CHANNEL_ID,
            message_id=post_id
        )
        
        # 2. Follow-up Premium Message
        await asyncio.sleep(1)
        await context.bot.send_message(
            chat_id=user_id,
            text=get_string(lang, 'free_success_followup'),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except BadRequest as e:
        if "message to forward not found" in str(e).lower():
            await update.message.reply_text(get_string(lang, 'err_admin_post_deleted'))
            await context.bot.send_message(OWNER_ID, f"‚ö†Ô∏è ERROR: /free command ‡∂ë‡∂ö ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í. Post ID {post_id} channel ‡∂ë‡∂ö‡∑ö ‡∂±‡∑ê‡∂≠! /setfree ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä ID ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±.")
        else:
            await update.message.reply_text(get_string(lang, 'err_generic').format(e=e))
    except Exception as e:
        logger.error(f"/free command error: {e}")
        await update.message.reply_text(get_string(lang, 'err_generic').format(e=e))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    (UPDATED) Shop ‡∂ë‡∂ö‡∑ö 'Buy' ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä (‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö‡∑Ä)
    """
    query = update.callback_query
    if not query or not query.message: return
        
    await query.answer()
    
    user = query.effective_user
    if not user: return
        
    data = query.data
    
    if not data.startswith("buy_"):
        return # ‡∂∏‡∑ô‡∂∫ 'lang_' button ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ö

    # User checks (Manual)
    user_doc_ref = db.collection('users').document(str(user.id))
    user_doc = await user_doc_ref.get()
    
    if not user_doc.exists:
        # User ‡∂ö‡∑ô‡∑É‡∑ö ‡∑Ñ‡∑ù /shop ‡∑Ä‡∑ô‡∂≠ ‡∂ú‡∑ú‡∑É‡∑ä ‡∂á‡∂≠, ‡∂±‡∂∏‡∑î‡∂≠‡∑ä db ‡∂ë‡∂ö‡∑ö ‡∂±‡∑ê‡∂≠.
        # (‡∂∏‡∑ô‡∂∫ ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑í‡∂∫ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö, ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑è‡∑Ä ‡∑É‡∂≥‡∑Ñ‡∑è)
        await get_user_doc(user.id, user.first_name, user.username)
        await query.message.reply_text("‚õî Error! Please type /start again.")
        return

    user_data = user_doc.to_dict()
    lang = user_data.get('language', 'si')

    if not await is_user_in_channel(user.id, context):
        await send_join_channel_message(query.message, lang)
        return

    if not user_data.get('is_registered', False):
        await query.message.reply_text(get_string(lang, 'err_not_registered'))
        return

    product_key = data[4:]
    if product_key not in PRODUCTS:
        await query.edit_message_text(get_string(lang, 'buy_err_no_package'))
        return
        
    product = PRODUCTS[product_key]
    price = product['price']
    
    # --- Firebase Transaction ---
    @firestore.async_transactional
    async def process_purchase(transaction, user_ref, price_to_deduct):
        doc = await user_ref.get(transaction=transaction)
        current_balance = doc.to_dict().get('coins', 0)
        if current_balance >= price_to_deduct:
            new_balance = current_balance - price_to_deduct
            transaction.update(user_ref, {"coins": new_balance})
            return True, new_balance # ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í
        else:
            return False, current_balance # ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í

    try:
        is_success, balance = await process_purchase(db.transaction(), user_doc_ref, price)

        if is_success:
            # --- ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í (Success) ---
            text = get_string(lang, 'buy_success').format(
                package_name=product['name'],
                new_balance=balance
            )
            await query.edit_message_text(text)
            
            # Owner ‡∂ß ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä ‡∂Ø‡∑ì‡∂∏ (English)
            user_mention = f"@{user.username}" if user.username else f"ID: {user.id}"
            await context.bot.send_message(
                chat_id=OWNER_ID,
                text=f"üîî **‡∂±‡∑Ä ‡∂Ö‡∂Ω‡∑ô‡∑Ä‡∑í‡∂∫‡∂ö‡∑ä! (New Sale)** üîî\n\n"
                     f"**User:** {user.first_name} ({user_mention})\n"
                     f"**Package:** {product['name']}\n"
                     f"**Price Paid:** {price} Coins\n\n"
                     f"‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∑ú‡∑Ñ‡∑î‡∂ß V2ray config ‡∂ë‡∂ö ‡∑É‡∑è‡∂Ø‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.",
                disable_web_page_preview=True
            )
        else:
            # --- ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í (Failed) ---
            text = get_string(lang, 'buy_fail_coins').format(
                package_name=product['name'],
                price=price,
                balance=balance
            )
            await context.bot.send_message(chat_id=user.id, text=text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Transaction error: {e}")
        await query.message.reply_text(get_string(lang, 'buy_err_tx'))

# === Admin & Broadcast Commands (‡∂∏‡∑ô‡∂∏ ‡∂ö‡∑ú‡∂ß‡∑É‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ô‡∂±‡∑É‡∑ä‡∑Ä ‡∂¥‡∑Ä‡∂≠‡∑ì) ===

async def owner_only_command(update: Update, context: ContextTypes.DEFAULT_TYPE, func):
    """Owner ID ‡∂ë‡∂ö ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂± Helper function ‡∂ë‡∂ö‡∂ö‡∑ä"""
    if not update.effective_user or update.effective_user.id != OWNER_ID:
        logger.warning(f"Unauthorized access denied for {update.effective_user.id}.")
        return
    await func(update, context)

async def send_command_logic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    replied_message = update.message.reply_to_message
    if not replied_message:
        await update.message.reply_text("‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: /send command ‡∂ë‡∂ö ‡∂î‡∂∂ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂∂‡∂Ω‡∑è‡∂¥‡∑ú‡∂ª‡∑ú‡∂≠‡∑ä‡∂≠‡∑î ‡∑Ä‡∂± V2ray ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ß 'Reply' ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
        return
    users_query = db.collection('users').select(["user_id"]).stream()
    target_users = [int(doc.id) async for doc in users_query if int(doc.id) != OWNER_ID]
    total_users = len(target_users)
    if total_users == 0:
        await update.message.reply_text("üòï Bot ‡∑Ñ‡∂ß ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑ñ ‡∂ö‡∑í‡∑É‡∑í‡∂Ø‡∑î ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î (users) ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫.")
        return
    await update.message.reply_text(f"‚è≥ V2ray (/send) Broadcast ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì...\n‡∂∏‡∑î‡∑Ö‡∑î Users: {total_users}\nBatch Size: {BROADCAST_BATCH_SIZE}")
    sent_count, failed_count = 0, 0
    for i, user_id in enumerate(target_users):
        try:
            await replied_message.copy(chat_id=user_id)
            sent_count += 1
            if (i + 1) % BROADCAST_BATCH_SIZE == 0: await asyncio.sleep(1) 
            else: await asyncio.sleep(0.05)
        except (Forbidden, BadRequest): failed_count += 1
        except Exception as e:
            logger.error(f"Send (copy) failed for user {user_id}: {e}")
            failed_count += 1
    await update.message.reply_text(f"üì£ Send ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´‡∂∫‡∑í! (Sent: {sent_count}, Failed: {failed_count})")

async def broadcast_command_logic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_to_send = update.message.text.split(' ', 1)
    if len(message_to_send) < 2:
        await update.message.reply_text("‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: /broadcast <‡∂î‡∂∂‡∑ö text message ‡∂ë‡∂ö>")
        return
    message_content = message_to_send[1]
    users_query = db.collection('users').select(["user_id"]).stream()
    target_users = [int(doc.id) async for doc in users_query if int(doc.id) != OWNER_ID]
    total_users = len(target_users)
    if total_users == 0:
        await update.message.reply_text("üòï Bot ‡∑Ñ‡∂ß ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑ñ ‡∂ö‡∑í‡∑É‡∑í‡∂Ø‡∑î ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î (users) ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫.")
        return
    await update.message.reply_text(f"‚è≥ Text Broadcast ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì...\n‡∂∏‡∑î‡∑Ö‡∑î Users: {total_users}\nBatch Size: {BROADCAST_BATCH_SIZE}")
    sent_count, failed_count = 0, 0
    for i, user_id in enumerate(target_users):
        try:
            await context.bot.send_message(chat_id=user_id, text=message_content, parse_mode=ParseMode.MARKDOWN)
            sent_count += 1
            if (i + 1) % BROADCAST_BATCH_SIZE == 0: await asyncio.sleep(1)
            else: await asyncio.sleep(0.05)
        except (Forbidden, BadRequest): failed_count += 1
        except Exception as e:
            logger.error(f"Broadcast (text) failed for user {user_id}: {e}")
            failed_count += 1
    await update.message.reply_text(f"üì£ Broadcast ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´‡∂∫‡∑í! (Sent: {sent_count}, Failed: {failed_count})")

async def setfree_command_logic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        post_id = int(context.args[0])
        settings_ref = db.collection('config').document('bot_settings')
        await settings_ref.set({'free_v2ray_post_id': post_id}, merge=True)
        await update.message.reply_text(f"‚úÖ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í!\n/free command ‡∂ë‡∂ö ‡∑É‡∂≥‡∑Ñ‡∑è Post ID ‡∂ë‡∂ö `{post_id}` ‡∂Ω‡∑ô‡∑É ‡∑É‡∂ö‡∑É‡∂± ‡∂Ω‡∂Ø‡∑ì.")
    except (IndexError, ValueError):
        await update.message.reply_text("‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: /setfree <Post ID>\n\n(Post ID ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß, channel ‡∂ë‡∂ö‡∑ö message ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∏‡∂ß forward ‡∂ö‡∂ª‡∂±‡∑ä‡∂±)")
    except Exception as e:
        logger.error(f"/setfree error: {e}")
        await update.message.reply_text(f"‚õî ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä! {e}")

async def addcoins_command_logic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id_to_add = int(context.args[0])
        amount_to_add = int(context.args[1])
        user_ref = db.collection('users').document(str(user_id_to_add))
        user_doc = await user_ref.get()
        if not user_doc.exists:
            await update.message.reply_text(f"‚õî ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä! User ID {user_id_to_add} ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂ú‡∂∂‡∂©‡∑è‡∑Ä‡∑ö (db) ‡∂±‡∑ê‡∂≠.")
            return
        await user_ref.update({"coins": firestore.Increment(amount_to_add)})
        new_balance = user_doc.to_dict().get('coins', 0) + amount_to_add
        await update.message.reply_text(f"‚úÖ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í!\nUser {user_id_to_add} ‡∂ß Coin {amount_to_add} ‡∂ö‡∑ä ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.\n‡∂±‡∑Ä Balance: {new_balance}")
        
        try:
            user_lang = user_doc.to_dict().get('language', 'si')
            if user_lang == 'si':
                notify_text = f"üéâ ‡∑É‡∑î‡∂∑ ‡∂¥‡∑ê‡∂≠‡∑î‡∂∏‡∑ä!\nOwner ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä ‡∂î‡∂∂‡∂ß **Coin {amount_to_add}** ‡∂ö‡∑ä ‡∂≠‡∑ë‡∂ú‡∑í ‡∂Ø‡∑ô‡∂± ‡∂Ω‡∂Ø‡∑ì!\n‡∂î‡∂∂‡∂ú‡∑ö ‡∂±‡∑Ä balance: {new_balance} Coins"
            else:
                notify_text = f"üéâ Congratulations!\nThe Owner sent you a gift of **{amount_to_add} Coins**!\nYour new balance: {new_balance} Coins"
            await context.bot.send_message(user_id_to_add, notify_text)
        except: pass
            
    except (IndexError, ValueError):
        await update.message.reply_text("‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: /addcoins <User ID> <Amount>")
    except Exception as e:
        logger.error(f"/addcoins error: {e}")
        await update.message.reply_text(f"‚õî ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä! {e}")

async def get_forwarded_post_id_handler_logic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fwd_chat = update.message.forward_from_chat
    if fwd_chat and fwd_chat.id == MAIN_CHANNEL_ID:
        post_id = update.message.forward_from_message_id
        await update.message.reply_text(
            f"‚úÖ **Post ID ‡∑Ñ‡∂∏‡∑î‡∑Ä‡∑í‡∂∫!**\n\nPost ID: `{post_id}`\n\nSet ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß:\n`/setfree {post_id}`",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(f"‚õî ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂î‡∂∂‡∂ú‡∑ö **Main Channel** ({MAIN_CHANNEL_ID}) ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä message ‡∂ë‡∂ö‡∂ö‡∑ä forward ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")

# Owner command wrappers
async def send_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await owner_only_command(update, context, send_command_logic)
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await owner_only_command(update, context, broadcast_command_logic)
async def setfree_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await owner_only_command(update, context, setfree_command_logic)
async def addcoins_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await owner_only_command(update, context, addcoins_command_logic)
async def get_forwarded_post_id_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user and update.effective_user.id == OWNER_ID:
        await get_forwarded_post_id_handler_logic(update, context)

# === Bot Startup ===

async def post_init(application: Application):
    try:
        bot_info = await application.bot.get_me()
        application.bot_data['username'] = bot_info.username
        logger.info(f"Bot @{bot_info.username} ‡∂Ω‡∑ô‡∑É ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ω‡∑ú‡∂ú‡∑ä ‡∑Ä‡∑í‡∂∫.")
        await application.bot.send_message(chat_id=OWNER_ID, text="ü§ñ Bot ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑í‡∂∫ (Multi-Language Active)!")
    except Exception as e:
        logger.critical(f"Bot username ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {e}")
        application.bot_data['username'] = "YOUR_BOT_USERNAME"

def main():
    logger.info("Bot ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì...")

    application = Application.builder().token(BOT_TOKEN).build()

    # Handlers ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("register", register_command))
    application.add_handler(CommandHandler("myaccount", myaccount_command))
    application.add_handler(CommandHandler("shop", shop_command))
    application.add_handler(CommandHandler("free", free_command))
    
    application.add_handler(CallbackQueryHandler(language_button_handler, pattern="^lang_"))
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^buy_"))
    
    # Owner (Admin) Commands
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    application.add_handler(CommandHandler("send", send_command))
    application.add_handler(CommandHandler("setfree", setfree_command))
    application.add_handler(CommandHandler("addcoins", addcoins_command))
    
    application.add_handler(MessageHandler(
        filters.FORWARDED & filters.User(user_id=OWNER_ID), 
        get_forwarded_post_id_handler
    ))
    
    application.post_init = post_init

    logger.info("Bot polling ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂∫‡∑í...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()

